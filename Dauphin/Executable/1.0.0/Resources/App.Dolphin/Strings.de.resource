<?xml version="1.0" encoding="utf-8"?>
<bundle name="Strings" type="String" culture="de">
  <data id="1">Samples (de)</data>
  <data id="11">Epsitec\Dauphin</data>
  <data id="2">Dauphin</data>
  <data id="263">Dauphin-Simulator</data>
  <data id="12">Dauphin-d</data>
  <data id="2C4">Teilung durch Null.</data>
  <data id="2D4">Unbekannte binäre Operation.</data>
  <data id="2A4">Fehlerhafter Ausdruck.</data>
  <data id="2B4">Unbekannte unäre Operation.</data>
  <data id="284">Wert ausserhalb der Grenzen.</data>
  <data id="294">Relative Adresse zu weit entfernt.</data>
  <data id="2R3">&lt;b&gt;Das Programm enthält keine Anweisung.&lt;/b&gt;</data>
  <data id="2T3">&lt;b&gt;{0} Fehler beim Assemblieren.&lt;/b&gt;</data>
  <data id="2S3">&lt;b&gt;{0} Anweisung(en) mit einem Total von {1} Bytes wurden korrekt assembliert.&lt;br/&gt;&lt;/b&gt;Klicken Sie auf den Button [Run], um das Programm auszuführen.</data>
  <data id="2H4">Fehlerhafte binäre Zahl.</data>
  <data id="2F4">Fehlerhafte Dezimalzahl (H&amp;apos; wenn Hexadezimal).</data>
  <data id="2I4">D&amp;apos; = Dezimal, H&amp;apos; = Hexadezimal, B&amp;apos; = Binär.</data>
  <data id="2G4">Fehlerhafte Hexadezimalzahl.</data>
  <data id="214">Unbekannte Pseudoanweisung.</data>
  <data id="204">Hier kann kein Argument stehen.</data>
  <data id="2V3">.LOC muss von einer Adresse gefolgt sein.</data>
  <data id="2U3">Der Titel fehlt.</data>
  <data id="2E4">Die Variable &amp;quot;{0}&amp;quot; wurde nicht definiert.</data>
  <data id="274">Diese Variable oder dieses Label wurde schon einmal definiert.</data>
  <data id="234">Fehlerhafter Variablename.</data>
  <data id="254">Hier kann kein Registername benutzt werden.</data>
  <data id="244">Diese Variable oder dieses Label wurde schon definiert.</data>
  <data id="224">Hier kann kein Registername benutzt werden.</data>
  <data id="264">Fehlerhafter Labelname.</data>
  <data id="2I">Adressbus</data>
  <data id="2H">Datenbus</data>
  <data id="2S">Register des Mikroprozessors</data>
  <data id="231">ASSEMBLER</data>
  <data id="241">Programm assemblieren</data>
  <data id="211">Grosse Schriftart</data>
  <data id="261">ERR</data>
  <data id="251">Sucht den nächsten Fehler</data>
  <data id="221">Vollbildschirm</data>
  <data id="2U">Importiert ein Quellcodeprogramm .txt</data>
  <data id="2V">Exportiert das Quellcodeprogramm .txt</data>
  <data id="201">Zeigt die Spezialzeichen</data>
  <data id="2T">Quellcode</data>
  <data id="2R">Fügt ein NOP vor der ausgewählten Anweisung hinzu</data>
  <data id="2K">PC</data>
  <data id="2L">Zeigt automatisch die Adresse, auf welche der PC zeigt</data>
  <data id="2M">RAM</data>
  <data id="2N">Zeigt den Anfang des RAM-Speichers</data>
  <data id="2O">ROM</data>
  <data id="2P">Zeigt den Anfang des ROM-Speichers</data>
  <data id="2Q">Löscht die ausgewählte Anweisung</data>
  <data id="2J">Speicher/Code</data>
  <data id="2N1">Register des Mikroprozessors</data>
  <data id="25">Über den Dauphin-Simulator</data>
  <data id="2B3">Fett</data>
  <data id="202">1</data>
  <data id="262">1 Anweisung/Sek.</data>
  <data id="2V1">10</data>
  <data id="212">10 Anweisungen/Sek.</data>
  <data id="2U1">100</data>
  <data id="222">100 Anweisungen/Sek.</data>
  <data id="2T1">1&amp;apos;000</data>
  <data id="232">1&amp;apos;000 Anweisungen/Sek.</data>
  <data id="2S1">10&amp;apos;000</data>
  <data id="242">10&amp;apos;000 Anweisungen/Sek.</data>
  <data id="2R1">100&amp;apos;000</data>
  <data id="252">100&amp;apos;000 Anweisungen/Sek.</data>
  <data id="2Q1">1M</data>
  <data id="2P1">1&amp;apos;000&amp;apos;000 Anweisungen/Sek.</data>
  <data id="2L3">DISPLAY</data>
  <data id="2O3">Zeigt bzw. versteckt den Bitmap-Bildschirm</data>
  <data id="2M3">CLS</data>
  <data id="2Q3">Löscht den Bildschirm</data>
  <data id="2L2">CRT</data>
  <data id="2M2">LCD</data>
  <data id="2P3">Look des Bildschirms</data>
  <data id="293">Kursiv</data>
  <data id="2N2">ARR</data>
  <data id="2O2">NUM</data>
  <data id="2N3">Tastatur numerisch (NUM) oder Pfeiltasten (ARR)</data>
  <data id="26">Look des Interface</data>
  <data id="22">Neues Programm</data>
  <data id="23">Öffnet ein binäres Programm .dolphin</data>
  <data id="2I2">R</data>
  <data id="2G2">Aus dem Speicher lesen (read)</data>
  <data id="2J2">RUN</data>
  <data id="2O1">Run/Stop</data>
  <data id="24">Speichert das binäre Programm .dolphin</data>
  <data id="2B2">S</data>
  <data id="2A2">Einen Schritt weiter (step)</data>
  <data id="2K2">STOP</data>
  <data id="2C2">OVER</data>
  <data id="2D2">&amp;quot;step over&amp;quot; oder &amp;quot;step into&amp;quot; bei einem CALL</data>
  <data id="2E2">INTO</data>
  <data id="272">CONT</data>
  <data id="292">Fortlaufende oder schrittweise Ausführung</data>
  <data id="282">STEP</data>
  <data id="2A3">Unterstrichen</data>
  <data id="2H2">W</data>
  <data id="2F2">In den Speicher schreiben (write)</data>
  <data id="2J1">DIS</data>
  <data id="2K1">Zeigt den Anfang des Bildschirmspeichers</data>
  <data id="2B1">PC</data>
  <data id="2C1">Zeigt automatisch die Adresse, auf die der PC zeigt</data>
  <data id="2I1">PER</data>
  <data id="2H1">Zeigt den Anfang der Peripheriezone</data>
  <data id="2E1">RAM</data>
  <data id="2D1">Zeigt den Anfang des RAM-Speichers</data>
  <data id="2M1">RESET</data>
  <data id="2L1">Setzt den Prozessor auf Null</data>
  <data id="2F1">ROM</data>
  <data id="2G1">Zeigt den Anfang des ROM-Speichers</data>
  <data id="291">Speicher</data>
  <data id="2A1">Register des Mikroprozessors</data>
  <data id="2C3">Dieses Programm wurde entwickelt von:&lt;br/&gt;Daniel Roux&lt;br/&gt;EPSITEC SA&lt;br/&gt;{0}&lt;br/&gt;&lt;br/&gt;Sie können das Handbuch hier herunterladen:&lt;br/&gt;{1}&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Version {2}&lt;/b&gt;</data>
  <data id="2S2">Wollen Sie das Programm speichern?</data>
  <data id="2T2">Wollen Sie {0} speichern?</data>
  <data id="2K3">Schliessen</data>
  <data id="2J4">&lt;b&gt;Der Speicherinhalt wurde um {0} Byte(s) ab der Adresse H&amp;apos;{1} verschoben.&lt;/b&gt;&lt;br/&gt;Vergessen Sie nicht, die Adressen von Anweisungen mit einem &lt;i&gt;ADDR&lt;/i&gt;-Argument (JUMP, MOVE usw.) anzupassen.</data>
  <data id="2H3">Derzeitige Version {0}</data>
  <data id="2I3">Keine Upgrade verfügbar</data>
  <data id="2E3">Eine Upgrade herunterladen</data>
  <data id="2G3">Folgende Upgrade ist verfügbar:</data>
  <data id="2J3">Upgrade {0}</data>
  <data id="2F3">Ihr Programm ist jetzt auf dem neusten Stand.</data>
  <data id="2R2">Programme</data>
  <data id="2D3">OK</data>
  <data id="2P2">Ein Binärprogramm öffnen</data>
  <data id="223">Ein Quellcodeprogramm importieren</data>
  <data id="2Q2">Ein Binärprogramm speichern</data>
  <data id="233">Ein Quellcodeprogramm exportieren</data>
  <data id="2U2">Öffnen der Datei unmöglich.</data>
  <data id="203">Fehlerhaftes Format der Datei.</data>
  <data id="2V2">Diese Datei wurde mit einer neueren Version gespeichert.</data>
  <data id="213">Schreiben der Datei unmöglich.</data>
  <data id="2S4">{0} muss von einer Adresse gefolgt sein.</data>
  <data id="215">Die Argumente der Anweisung {0} sind fehlerhaft.</data>
  <data id="2R4">BYTE muss von einem unmittelbaren Wert gefolgt sein, welcher dem Byte im Speicher entspricht.</data>
  <data id="245">Folgende Anweisungen sind hier möglich:</data>
  <data id="235">Folgende Anweisung ist hier möglich:</data>
  <data id="2U4">{0} muss vom Namen eines Registers gefolgt sein</data>
  <data id="2V4">{0} muss vom Namen eines Registers oder von einer Adresse gefolgt sein.</data>
  <data id="205">SWAP muss vom Namen eines Registers (A oder B) gefolgt sein.</data>
  <data id="2Q4">TABLE muss von einem unmittelbaren Wert gefolgt sein, welcher der Anzahl Bytes in der Tabelle entspricht.</data>
  <data id="2O4">Die Anweisung {0} hat kein Argument.</data>
  <data id="243">Wollen Sie das Quellcodeprogramm assemblieren?</data>
  <data id="253">Der Quellcode ist fehlerfrei.</data>
  <data id="281">&lt;i&gt;Leer, um die Ausführung mit maximaler Geschwindigkeit zu erlauben&lt;/i&gt;</data>
  <data id="271">Turbo</data>
  <data id="27">BUS</data>
  <data id="2C">Zeigt Adress- und Datenbus</data>
  <data id="2A">SOURCE</data>
  <data id="2G">Quellcode-Assembler</data>
  <data id="29">CODE</data>
  <data id="2D">Zeigt die Anweisungen des Prozessors</data>
  <data id="28">CPU+MEM</data>
  <data id="2E">Zeigt die Register des Prozessors und den Speicherinhalt</data>
  <data id="2B">TURBO</data>
  <data id="2F">Keine Anzeige (maximale Geschwindigkeit)</data>
  <data id="2C5">Grundlagen</data>
  <data id="295">Syntax</data>
  <data id="2A5">Ops</data>
  <data id="283">Bemerk.</data>
  <data id="2B5">ROM</data>
  <data id="273">&lt;br/&gt;&lt;i&gt;Geben Sie hier die Kommentare zum Programm ein...&lt;/i&gt;</data>
  <data id="225">&lt;b&gt;Unbekannte Anweisung.&lt;br/&gt;&lt;br/&gt;Folgende Anweisungen können benutzt werden:&lt;br/&gt;{0}JUMP, CALL, RET, PUSH, POP&lt;br/&gt;{0}MOVE, COMP, ADD, SUB, AND, OR, XOR&lt;br/&gt;{0}CLR, NOT, INC, DEC, RL, RR, RLC, RRC&lt;br/&gt;{0}TEST, TSET, TCLR, TNOT&lt;br/&gt;{0}NOP, CLRC, SETC, NOTC, EX, SWAP, HALT&lt;br/&gt;{0}TABLE, BYTE&lt;br/&gt; &lt;/b&gt;</data>
  <data id="285">&lt;i&gt;ADDR&lt;/i&gt; = Adresse H&amp;apos;C00, {PC}+H&amp;apos;DA, {PC}-3, {SP}+2, H&amp;apos;C80+{X}+{Y}</data>
  <data id="265">&lt;i&gt;r&amp;apos;&lt;/i&gt; = Register A, B</data>
  <data id="255">&lt;i&gt;r&lt;/i&gt; = Register A, B, X, Y</data>
  <data id="275">&lt;i&gt;#val&lt;/i&gt; = unmittelbarer Wert #H&amp;apos;12, #H&amp;apos;C0, #B&amp;apos;0110, #D&amp;apos;99, #99</data>
  <data id="21">© EPSITEC SA</data>
  <data id="2D5">T:Binär und Hexadezimal &lt;br/&gt;L:(&amp;lt;i&amp;gt;Dezimal: Binär = Hexadezimal&amp;lt;/i&amp;gt;) &lt;br/&gt;L:  0: 0000 = H'0 &lt;br/&gt;L:  1: 0001 = H'1 &lt;br/&gt;L:  2: 0010 = H'2 &lt;br/&gt;L:  3: 0011 = H'3 &lt;br/&gt;L:  4: 0100 = H'4 &lt;br/&gt;L:  5: 0101 = H'5 &lt;br/&gt;L:  6: 0110 = H'6 &lt;br/&gt;L:  7: 0111 = H'7 &lt;br/&gt;L:  8: 1000 = H'8 &lt;br/&gt;L:  9: 1001 = H'9 &lt;br/&gt;L:10: 1010 = H'A &lt;br/&gt;L:11: 1011 = H'B &lt;br/&gt;L:12: 1100 = H'C &lt;br/&gt;L:13: 1101 = H'D &lt;br/&gt;L:14: 1110 = H'E &lt;br/&gt;L:15: 1111 = H'F &lt;br/&gt;&lt;br/&gt;T:Adressraum &lt;br/&gt;L:[H'000..H'7FF]&amp;lt;tab/&amp;gt;RAM &lt;br/&gt;L:[H'800..H'BFF]&amp;lt;tab/&amp;gt;ROM &lt;br/&gt;L:[H'C00..H'C0F]&amp;lt;tab/&amp;gt;Peripherie &lt;br/&gt;L:[H'C80..H'CDF]&amp;lt;tab/&amp;gt;Bildschirm&lt;br/&gt;&lt;br/&gt;T:Anzeige &lt;br/&gt;L:Die Anzeige besteht aus vier 7-Segment-Anzeigen (plus Dezimalpunkt), welche von rechts nach links nummeriert sind. Ein geschriebener Wert wird gespeichert und lässt die entsprechenden Segmente aufleuchten. Der gespeicherte Wert kann auch wieder ausgelesen werden. &lt;br/&gt;L:[H'C00]&amp;lt;tab/&amp;gt;erste Stelle (ganz links)&lt;br/&gt;L:[H'C01]&amp;lt;tab/&amp;gt;zweite Stelle &lt;br/&gt;L:[H'C02]&amp;lt;tab/&amp;gt;dritte Stelle &lt;br/&gt;L:[H'C03]&amp;lt;tab/&amp;gt;vierte Stelle (ganz rechts)&lt;br/&gt;L: &lt;br/&gt;L:bit 0&amp;lt;tab/&amp;gt;vertikales Segment oben rechts &lt;br/&gt;L:bit 1&amp;lt;tab/&amp;gt;vertikales Segment unten rechts &lt;br/&gt;L:bit 2&amp;lt;tab/&amp;gt;horizontales Segment unten&lt;br/&gt;L:bit 3&amp;lt;tab/&amp;gt;vertikales Segment unten links &lt;br/&gt;L:bit 4&amp;lt;tab/&amp;gt;vertikales Segment oben links &lt;br/&gt;L:bit 5&amp;lt;tab/&amp;gt;horizontales Segment oben &lt;br/&gt;L:bit 6&amp;lt;tab/&amp;gt;horizontales Segment Mitte &lt;br/&gt;L:bit 7&amp;lt;tab/&amp;gt;Dezimalpunkt&lt;br/&gt;L: &lt;br/&gt;L:Konstanten des Assemblers: &lt;br/&gt;L:_DIGIT0&amp;lt;tab/&amp;gt;&amp;lt;tab/&amp;gt;&amp;lt;tab/&amp;gt;= H'C00 &lt;br/&gt;L:_DIGIT1&amp;lt;tab/&amp;gt;&amp;lt;tab/&amp;gt;&amp;lt;tab/&amp;gt;= H'C01 &lt;br/&gt;L:_DIGIT2&amp;lt;tab/&amp;gt;&amp;lt;tab/&amp;gt;&amp;lt;tab/&amp;gt;= H'C02 &lt;br/&gt;L:_DIGIT3&amp;lt;tab/&amp;gt;&amp;lt;tab/&amp;gt;&amp;lt;tab/&amp;gt;= H'C03 &lt;br/&gt;L:_DIGITCOUNT&amp;lt;tab/&amp;gt;&amp;lt;tab/&amp;gt;= D'4 &lt;br/&gt;&lt;br/&gt;T:Tastatur&lt;br/&gt;L:Im NUM-Modus (numerisch) besteht die Tastatur aus 8 Tasten 0..7 und zwei Supershift-Tasten. &lt;br/&gt;L:Im ARR-Modus (Pfeiltasten) besteht die Tastatur aus 4 Supershift-Pfeiltasten.&lt;br/&gt;L:[H'C07]&amp;lt;tab/&amp;gt;Tastatur. &lt;br/&gt;L: &lt;br/&gt;L:Bits 0..2&amp;lt;tab/&amp;gt;Tasten 0..7. &lt;br/&gt;L:Bit 3&amp;lt;tab/&amp;gt;Shift-Taste oder Pfeil nach unten &lt;br/&gt;L:Bit 4&amp;lt;tab/&amp;gt;Ctrl-Taste oder Pfeil nach oben &lt;br/&gt;L:Bit 5&amp;lt;tab/&amp;gt;Pfeiltaste nach links&lt;br/&gt;L:Bit 6&amp;lt;tab/&amp;gt;Pfeiltaste nach rechts &lt;br/&gt;L:Bit 7&amp;lt;tab/&amp;gt;Enthält 1, wenn eine der Tasten von 0 bis 7 gedrück wurde. Wird auf Null gesetzt, wenn die Adresse H'C07 gelesen wird. &lt;br/&gt;L: &lt;br/&gt;L:Konstanten des Assemblers: &lt;br/&gt;L:_KEYBOARD&amp;lt;tab/&amp;gt;&amp;lt;tab/&amp;gt;= H'C07 &lt;br/&gt;L:_KEYBOARDSHIFT&amp;lt;tab/&amp;gt;= D'3 &lt;br/&gt;L:_KEYBOARDCTRL&amp;lt;tab/&amp;gt;= D'4 &lt;br/&gt;L:_KEYBOARDDOWN&amp;lt;tab/&amp;gt;= D'3 &lt;br/&gt;L:_KEYBOARDUP&amp;lt;tab/&amp;gt;&amp;lt;tab/&amp;gt;= D'4 &lt;br/&gt;L:_KEYBOARDLEFT&amp;lt;tab/&amp;gt;&amp;lt;tab/&amp;gt;= D'5 &lt;br/&gt;L:_KEYBOARDRIGHT&amp;lt;tab/&amp;gt;= D'6 &lt;br/&gt;L:_KEYBOARDFULL&amp;lt;tab/&amp;gt;= D'7 &lt;br/&gt;&lt;br/&gt;T:Bildschirm &lt;br/&gt;L:Der einfarbige Bildschirm hat eine Auflösung von 32 x 24 Pixel. Jedes Byte entspricht einer horizontalen Reihe von 8 Pixel, Bit 7 ist ganz links.&lt;br/&gt;L: &lt;br/&gt;L:[H'C80..H'C83]&amp;lt;tab/&amp;gt;erste Zeile mit 32 Pixel&lt;br/&gt;L:[H'C84..H'C87]&amp;lt;tab/&amp;gt;zweite Zeile mit 32 Pixel &lt;br/&gt;L:... &lt;br/&gt;L:[H'CDC..H'CDF]&amp;lt;tab/&amp;gt;24. Zeile mit 32 Pixel &lt;br/&gt;L: &lt;br/&gt;L:Konstanten des Assemblers: &lt;br/&gt;L:_BITMAP&amp;lt;tab/&amp;gt;&amp;lt;tab/&amp;gt;= H'C80 &lt;br/&gt;L:_BITMAPWIDTH&amp;lt;tab/&amp;gt;&amp;lt;tab/&amp;gt;= D'32 &lt;br/&gt;L:_BITMAPHEIGHT&amp;lt;tab/&amp;gt;&amp;lt;tab/&amp;gt;= D'24 &lt;br/&gt;</data>
  <data id="2E5">T:Register &lt;br/&gt;L:&amp;lt;b&amp;gt;[xx+r]       &amp;lt;tab/&amp;gt;&amp;lt;i&amp;gt;r&amp;lt;/i&amp;gt;&amp;lt;/b&amp;gt; &lt;br/&gt;L:&amp;lt;i&amp;gt;r&amp;lt;/i&amp;gt;=0             &amp;lt;tab/&amp;gt;A &lt;br/&gt;L:&amp;lt;i&amp;gt;r&amp;lt;/i&amp;gt;=1             &amp;lt;tab/&amp;gt;B &lt;br/&gt;L:&amp;lt;i&amp;gt;r&amp;lt;/i&amp;gt;=2             &amp;lt;tab/&amp;gt;X &lt;br/&gt;L:&amp;lt;i&amp;gt;r&amp;lt;/i&amp;gt;=3             &amp;lt;tab/&amp;gt;Y &lt;br/&gt;L: &lt;br/&gt;L:&amp;lt;b&amp;gt;[xx+r']      &amp;lt;tab/&amp;gt;&amp;lt;i&amp;gt;r'&amp;lt;/i&amp;gt;&amp;lt;/b&amp;gt; &lt;br/&gt;L:&amp;lt;i&amp;gt;r'&amp;lt;/i&amp;gt;=0            &amp;lt;tab/&amp;gt;A &lt;br/&gt;L:&amp;lt;i&amp;gt;r'&amp;lt;/i&amp;gt;=1            &amp;lt;tab/&amp;gt;B &lt;br/&gt;&lt;br/&gt;T:Unmittelbare Adressierung &lt;br/&gt;L:&amp;lt;b&amp;gt;[vv]          &amp;lt;tab/&amp;gt;&amp;lt;i&amp;gt;#val&amp;lt;/i&amp;gt;&amp;lt;/b&amp;gt; &lt;br/&gt;L:vv              &amp;lt;tab/&amp;gt;Positiver 8-Bit-Wert. &lt;br/&gt;&lt;br/&gt;T:Adressierung &lt;br/&gt;L:&amp;lt;b&amp;gt;[mh] [ll]     &amp;lt;tab/&amp;gt;&amp;lt;i&amp;gt;ADDR&amp;lt;/i&amp;gt;&amp;lt;/b&amp;gt; &lt;br/&gt;L:m=0             &amp;lt;tab/&amp;gt;Absolute Adresse 12 Bits &lt;br/&gt;L:m=1             &amp;lt;tab/&amp;gt;+{X} &lt;br/&gt;L:m=2             &amp;lt;tab/&amp;gt;+{Y} &lt;br/&gt;L:m=4             &amp;lt;tab/&amp;gt;{SP}+offset&lt;br/&gt;L:m=8             &amp;lt;tab/&amp;gt;{PC}+offset &lt;br/&gt;L: &lt;br/&gt;L:&amp;lt;b&amp;gt;Beispiele&amp;lt;/b&amp;gt; &lt;br/&gt;L:[54] [0C] [07]  &amp;lt;tab/&amp;gt;MOVE H'C07, A &lt;br/&gt;L:[58] [1C] [00]  &amp;lt;tab/&amp;gt;MOVE A, H'C00+{X} &lt;br/&gt;L:[10] [80] [10]  &amp;lt;tab/&amp;gt;JUMP {PC}+10 (überspringt 10 Bytes) &lt;br/&gt;L:[10] [8F] [FD]  &amp;lt;tab/&amp;gt;JUMP {PC}-3 (Unendliche Schleife) &lt;br/&gt;L:[54] [40] [02]  &amp;lt;tab/&amp;gt;MOVE {SP}+2, A &lt;br/&gt;</data>
  <data id="2F5">T:Transfers&lt;br/&gt;L:[40+r]          &amp;lt;tab/&amp;gt;MOVE A, &amp;lt;i&amp;gt;r&amp;lt;/i&amp;gt;       &amp;lt;tab/&amp;gt;&amp;lt;tab/&amp;gt;(N, Z) &lt;br/&gt;L:[44+r]          &amp;lt;tab/&amp;gt;MOVE B, &amp;lt;i&amp;gt;r&amp;lt;/i&amp;gt;       &amp;lt;tab/&amp;gt;&amp;lt;tab/&amp;gt;(N, Z) &lt;br/&gt;L:[48+r]          &amp;lt;tab/&amp;gt;MOVE X, &amp;lt;i&amp;gt;r&amp;lt;/i&amp;gt;       &amp;lt;tab/&amp;gt;&amp;lt;tab/&amp;gt;(N, Z) &lt;br/&gt;L:[4C+r]          &amp;lt;tab/&amp;gt;MOVE Y, &amp;lt;i&amp;gt;r&amp;lt;/i&amp;gt;       &amp;lt;tab/&amp;gt;&amp;lt;tab/&amp;gt;(N, Z) &lt;br/&gt;L:[50+r] [vv]     &amp;lt;tab/&amp;gt;MOVE &amp;lt;i&amp;gt;#val&amp;lt;/i&amp;gt;, &amp;lt;i&amp;gt;r&amp;lt;/i&amp;gt; &amp;lt;tab/&amp;gt;&amp;lt;tab/&amp;gt;(N, Z) &lt;br/&gt;L:[54+r] [mh] [ll]&amp;lt;tab/&amp;gt;MOVE &amp;lt;i&amp;gt;ADDR&amp;lt;/i&amp;gt;, &amp;lt;i&amp;gt;r&amp;lt;/i&amp;gt; &amp;lt;tab/&amp;gt;&amp;lt;tab/&amp;gt;(N, Z) &lt;br/&gt;L:[58+r] [mh] [ll]&amp;lt;tab/&amp;gt;MOVE &amp;lt;i&amp;gt;r&amp;lt;/i&amp;gt;, &amp;lt;i&amp;gt;ADDR&amp;lt;/i&amp;gt; &amp;lt;tab/&amp;gt;&amp;lt;tab/&amp;gt;(N, Z) &lt;br/&gt;L:[DC] [vv] [mh] [ll] MOVE &amp;lt;i&amp;gt;#val&amp;lt;/i&amp;gt;, &amp;lt;i&amp;gt;ADDR&amp;lt;/i&amp;gt;&amp;lt;tab/&amp;gt;(N, Z) &lt;br/&gt;&lt;br/&gt;T:Addition &lt;br/&gt;L:[80+r]          &amp;lt;tab/&amp;gt;ADD A, &amp;lt;i&amp;gt;r&amp;lt;/i&amp;gt;       &amp;lt;tab/&amp;gt;&amp;lt;tab/&amp;gt;(N, Z, C) &lt;br/&gt;L:[84+r]          &amp;lt;tab/&amp;gt;ADD B, &amp;lt;i&amp;gt;r&amp;lt;/i&amp;gt;      &amp;lt;tab/&amp;gt;&amp;lt;tab/&amp;gt;(N, Z, C) &lt;br/&gt;L:[88+r]          &amp;lt;tab/&amp;gt;ADD X, &amp;lt;i&amp;gt;r&amp;lt;/i&amp;gt;       &amp;lt;tab/&amp;gt;&amp;lt;tab/&amp;gt;(N, Z, C) &lt;br/&gt;L:[8C+r]          &amp;lt;tab/&amp;gt;ADD Y, &amp;lt;i&amp;gt;r&amp;lt;/i&amp;gt;       &amp;lt;tab/&amp;gt;&amp;lt;tab/&amp;gt;(N, Z, C) &lt;br/&gt;L:[A0+r] [vv]     &amp;lt;tab/&amp;gt;ADD &amp;lt;i&amp;gt;#val&amp;lt;/i&amp;gt;, &amp;lt;i&amp;gt;r&amp;lt;/i&amp;gt; &amp;lt;tab/&amp;gt;&amp;lt;tab/&amp;gt;(N, Z, C) &lt;br/&gt;L:[B0+r] [mh] [ll]&amp;lt;tab/&amp;gt;ADD &amp;lt;i&amp;gt;ADDR&amp;lt;/i&amp;gt;, &amp;lt;i&amp;gt;r&amp;lt;/i&amp;gt; &amp;lt;tab/&amp;gt;&amp;lt;tab/&amp;gt;(N, Z, C) &lt;br/&gt;L:[B8+r] [mh] [ll]&amp;lt;tab/&amp;gt;ADD &amp;lt;i&amp;gt;r&amp;lt;/i&amp;gt;, &amp;lt;i&amp;gt;ADDR&amp;lt;/i&amp;gt; &amp;lt;tab/&amp;gt;&amp;lt;tab/&amp;gt;(N, Z, C) &lt;br/&gt;L:[DE] [vv] [mh] [ll] ADD &amp;lt;i&amp;gt;#val&amp;lt;/i&amp;gt;, &amp;lt;i&amp;gt;ADDR&amp;lt;/i&amp;gt;&amp;lt;tab/&amp;gt;(N, Z, C) &lt;br/&gt;&lt;br/&gt;T:Subtraktion&lt;br/&gt;L:[90+r]          &amp;lt;tab/&amp;gt;SUB A, &amp;lt;i&amp;gt;r&amp;lt;/i&amp;gt;      &amp;lt;tab/&amp;gt;&amp;lt;tab/&amp;gt;(N, Z, C) &lt;br/&gt;L:[94+r]          &amp;lt;tab/&amp;gt;SUB B, &amp;lt;i&amp;gt;r&amp;lt;/i&amp;gt;       &amp;lt;tab/&amp;gt;&amp;lt;tab/&amp;gt;(N, Z, C) &lt;br/&gt;L:[98+r]          &amp;lt;tab/&amp;gt;SUB X, &amp;lt;i&amp;gt;r&amp;lt;/i&amp;gt;       &amp;lt;tab/&amp;gt;&amp;lt;tab/&amp;gt;(N, Z, C) &lt;br/&gt;L:[9C+r]          &amp;lt;tab/&amp;gt;SUB Y, &amp;lt;i&amp;gt;r&amp;lt;/i&amp;gt;       &amp;lt;tab/&amp;gt;&amp;lt;tab/&amp;gt;(N, Z, C) &lt;br/&gt;L:[A4+r] [vv]     &amp;lt;tab/&amp;gt;SUB &amp;lt;i&amp;gt;#val&amp;lt;/i&amp;gt;, &amp;lt;i&amp;gt;r&amp;lt;/i&amp;gt;   &amp;lt;tab/&amp;gt;&amp;lt;tab/&amp;gt;(N, Z, C) &lt;br/&gt;L:[B4+r] [mh] [ll]&amp;lt;tab/&amp;gt;SUB &amp;lt;i&amp;gt;ADDR&amp;lt;/i&amp;gt;, &amp;lt;i&amp;gt;r&amp;lt;/i&amp;gt;   &amp;lt;tab/&amp;gt;&amp;lt;tab/&amp;gt;(N, Z, C) &lt;br/&gt;L:[BC+r] [mh] [ll]&amp;lt;tab/&amp;gt;SUB &amp;lt;i&amp;gt;r&amp;lt;/i&amp;gt;, &amp;lt;i&amp;gt;ADDR&amp;lt;/i&amp;gt;   &amp;lt;tab/&amp;gt;&amp;lt;tab/&amp;gt;(N, Z, C) &lt;br/&gt;L:[DF] [vv] [mh] [ll] SUB &amp;lt;i&amp;gt;#val&amp;lt;/i&amp;gt;, &amp;lt;i&amp;gt;ADDR&amp;lt;/i&amp;gt; &amp;lt;tab/&amp;gt;(N, Z, C) &lt;br/&gt;&lt;br/&gt;T:Logisches UND&lt;br/&gt;L:[E0]             &amp;lt;tab/&amp;gt;AND A, B      &amp;lt;tab/&amp;gt;&amp;lt;tab/&amp;gt;(N, Z) &lt;br/&gt;L:[E1]             &amp;lt;tab/&amp;gt;AND B, A      &amp;lt;tab/&amp;gt;&amp;lt;tab/&amp;gt;(N, Z) &lt;br/&gt;L:[74+r] [vv]      &amp;lt;tab/&amp;gt;AND &amp;lt;i&amp;gt;#val&amp;lt;/i&amp;gt;, &amp;lt;i&amp;gt;r&amp;lt;/i&amp;gt;    &amp;lt;tab/&amp;gt;&amp;lt;tab/&amp;gt;(N, Z) &lt;br/&gt;L:[E8+r'] [mh] [ll]&amp;lt;tab/&amp;gt;AND &amp;lt;i&amp;gt;ADDR&amp;lt;/i&amp;gt;, &amp;lt;i&amp;gt;r'&amp;lt;/i&amp;gt;  &amp;lt;tab/&amp;gt;&amp;lt;tab/&amp;gt;(N, Z) &lt;br/&gt;L:[F0+r'] [mh] [ll]&amp;lt;tab/&amp;gt;AND &amp;lt;i&amp;gt;r'&amp;lt;/i&amp;gt;, &amp;lt;i&amp;gt;ADDR&amp;lt;/i&amp;gt;   &amp;lt;tab/&amp;gt;&amp;lt;tab/&amp;gt;(N, Z) &lt;br/&gt;&lt;br/&gt;T:Logisches ODER&lt;br/&gt;L:[E2]             &amp;lt;tab/&amp;gt;OR A, B      &amp;lt;tab/&amp;gt;&amp;lt;tab/&amp;gt;(N, Z) &lt;br/&gt;L:[E3]             &amp;lt;tab/&amp;gt;OR B, A      &amp;lt;tab/&amp;gt;&amp;lt;tab/&amp;gt;(N, Z) &lt;br/&gt;L:[78+r] [vv]      &amp;lt;tab/&amp;gt;OR &amp;lt;i&amp;gt;#val&amp;lt;/i&amp;gt;, &amp;lt;i&amp;gt;r&amp;lt;/i&amp;gt;    &amp;lt;tab/&amp;gt;&amp;lt;tab/&amp;gt;(N, Z) &lt;br/&gt;L:[EA+r'] [mh] [ll]&amp;lt;tab/&amp;gt;OR &amp;lt;i&amp;gt;ADDR&amp;lt;/i&amp;gt;, &amp;lt;i&amp;gt;r'&amp;lt;/i&amp;gt;   &amp;lt;tab/&amp;gt;&amp;lt;tab/&amp;gt;(N, Z) &lt;br/&gt;L:[F2+r'] [mh] [ll]&amp;lt;tab/&amp;gt;OR &amp;lt;i&amp;gt;r'&amp;lt;/i&amp;gt;, &amp;lt;i&amp;gt;ADDR&amp;lt;/i&amp;gt;   &amp;lt;tab/&amp;gt;&amp;lt;tab/&amp;gt;(N, Z) &lt;br/&gt;&lt;br/&gt;T:Logisches exklusives ODER&lt;br/&gt;L:[E4]             &amp;lt;tab/&amp;gt;XOR A, B      &amp;lt;tab/&amp;gt;&amp;lt;tab/&amp;gt;(N, Z) &lt;br/&gt;L:[E5]             &amp;lt;tab/&amp;gt;XOR B, A      &amp;lt;tab/&amp;gt;&amp;lt;tab/&amp;gt;(N, Z) &lt;br/&gt;L:[7C+r] [vv]      &amp;lt;tab/&amp;gt;XOR &amp;lt;i&amp;gt;#val&amp;lt;/i&amp;gt;, &amp;lt;i&amp;gt;r&amp;lt;/i&amp;gt;    &amp;lt;tab/&amp;gt;&amp;lt;tab/&amp;gt;(N, Z) &lt;br/&gt;L:[EC+r'] [mh] [ll]&amp;lt;tab/&amp;gt;XOR &amp;lt;i&amp;gt;ADDR&amp;lt;/i&amp;gt;, &amp;lt;i&amp;gt;r'&amp;lt;/i&amp;gt;   &amp;lt;tab/&amp;gt;&amp;lt;tab/&amp;gt;(N, Z) &lt;br/&gt;L:[F4+r'] [mh] [ll]&amp;lt;tab/&amp;gt;XOR &amp;lt;i&amp;gt;r'&amp;lt;/i&amp;gt;, &amp;lt;i&amp;gt;ADDR&amp;lt;/i&amp;gt;   &amp;lt;tab/&amp;gt;&amp;lt;tab/&amp;gt;(N, Z) &lt;br/&gt;&lt;br/&gt;T:Ein Bit testen&lt;br/&gt;L:[C0]             &amp;lt;tab/&amp;gt;TEST B :A      &amp;lt;tab/&amp;gt;&amp;lt;tab/&amp;gt;(Z) &lt;br/&gt;L:[C1]             &amp;lt;tab/&amp;gt;TEST A :B      &amp;lt;tab/&amp;gt;&amp;lt;tab/&amp;gt;(Z) &lt;br/&gt;L:[D0+r'] [vv]     &amp;lt;tab/&amp;gt;TEST &amp;lt;i&amp;gt;r'&amp;lt;/i&amp;gt; :&amp;lt;i&amp;gt;#val&amp;lt;/i&amp;gt;   &amp;lt;tab/&amp;gt;&amp;lt;tab/&amp;gt;(Z) &lt;br/&gt;L:[C8+r'] [mh] [ll]&amp;lt;tab/&amp;gt;TEST &amp;lt;i&amp;gt;ADDR&amp;lt;/i&amp;gt; :&amp;lt;i&amp;gt;r'&amp;lt;/i&amp;gt;   &amp;lt;tab/&amp;gt;&amp;lt;tab/&amp;gt;(Z) &lt;br/&gt;L:[D8] [vv] [mh] [ll] TEST &amp;lt;i&amp;gt;ADDR&amp;lt;/i&amp;gt; :&amp;lt;i&amp;gt;#val&amp;lt;/i&amp;gt;    &amp;lt;tab/&amp;gt;(Z) &lt;br/&gt;&lt;br/&gt;T:Bit testen und auf Eins setzen&lt;br/&gt;L:[C2]             &amp;lt;tab/&amp;gt;TSET B :A      &amp;lt;tab/&amp;gt;&amp;lt;tab/&amp;gt;(Z) &lt;br/&gt;L:[C3]             &amp;lt;tab/&amp;gt;TSET A :B      &amp;lt;tab/&amp;gt;&amp;lt;tab/&amp;gt;(Z) &lt;br/&gt;L:[D2+r'] [vv]     &amp;lt;tab/&amp;gt;TSET &amp;lt;i&amp;gt;r'&amp;lt;/i&amp;gt; :&amp;lt;i&amp;gt;#val&amp;lt;/i&amp;gt;   &amp;lt;tab/&amp;gt;&amp;lt;tab/&amp;gt;(Z) &lt;br/&gt;L:[CA+r'] [mh] [ll]&amp;lt;tab/&amp;gt;TSET &amp;lt;i&amp;gt;ADDR&amp;lt;/i&amp;gt; :&amp;lt;i&amp;gt;r'&amp;lt;/i&amp;gt;   &amp;lt;tab/&amp;gt;&amp;lt;tab/&amp;gt;(Z) &lt;br/&gt;L:[D9] [vv] [mh] [ll] TSET &amp;lt;i&amp;gt;ADDR&amp;lt;/i&amp;gt; :&amp;lt;i&amp;gt;#val&amp;lt;/i&amp;gt;    &amp;lt;tab/&amp;gt;(Z) &lt;br/&gt;&lt;br/&gt;T:Bit testen und auf Null setzen&lt;br/&gt;L:[C4]             &amp;lt;tab/&amp;gt;TCLR B :A      &amp;lt;tab/&amp;gt;&amp;lt;tab/&amp;gt;(Z) &lt;br/&gt;L:[C5]             &amp;lt;tab/&amp;gt;TCLR A :B      &amp;lt;tab/&amp;gt;&amp;lt;tab/&amp;gt;(Z) &lt;br/&gt;L:[D4+r'] [vv]     &amp;lt;tab/&amp;gt;TCLR &amp;lt;i&amp;gt;r'&amp;lt;/i&amp;gt; :&amp;lt;i&amp;gt;#val&amp;lt;/i&amp;gt;   &amp;lt;tab/&amp;gt;&amp;lt;tab/&amp;gt;(Z) &lt;br/&gt;L:[CC+r'] [mh] [ll]&amp;lt;tab/&amp;gt;TCLR &amp;lt;i&amp;gt;ADDR&amp;lt;/i&amp;gt; :&amp;lt;i&amp;gt;r'&amp;lt;/i&amp;gt;   &amp;lt;tab/&amp;gt;&amp;lt;tab/&amp;gt;(Z) &lt;br/&gt;L:[DA] [vv] [mh] [ll] TCLR &amp;lt;i&amp;gt;ADDR&amp;lt;/i&amp;gt; :&amp;lt;i&amp;gt;#val&amp;lt;/i&amp;gt;    &amp;lt;tab/&amp;gt;(Z) &lt;br/&gt;&lt;br/&gt;T:Bit testen und umkehren &lt;br/&gt;L:[C6]             &amp;lt;tab/&amp;gt;TNOT B :A      &amp;lt;tab/&amp;gt;&amp;lt;tab/&amp;gt;(Z) &lt;br/&gt;L:[C7]             &amp;lt;tab/&amp;gt;TNOT A :B      &amp;lt;tab/&amp;gt;&amp;lt;tab/&amp;gt;(Z) &lt;br/&gt;L:[D6+r'] [vv]     &amp;lt;tab/&amp;gt;TNOT &amp;lt;i&amp;gt;r'&amp;lt;/i&amp;gt; :&amp;lt;i&amp;gt;#val&amp;lt;/i&amp;gt;   &amp;lt;tab/&amp;gt;&amp;lt;tab/&amp;gt;(Z) &lt;br/&gt;L:[CE+r'] [mh] [ll]&amp;lt;tab/&amp;gt;TNOT &amp;lt;i&amp;gt;ADDR&amp;lt;/i&amp;gt; :&amp;lt;i&amp;gt;r'&amp;lt;/i&amp;gt;   &amp;lt;tab/&amp;gt;&amp;lt;tab/&amp;gt;(Z) &lt;br/&gt;L:[DB] [vv] [mh] [ll] TNOT &amp;lt;i&amp;gt;ADDR&amp;lt;/i&amp;gt; :&amp;lt;i&amp;gt;#val&amp;lt;/i&amp;gt;    &amp;lt;tab/&amp;gt;(Z) &lt;br/&gt;&lt;br/&gt;T:Vergleiche &lt;br/&gt;L:[60+r]          &amp;lt;tab/&amp;gt;COMP A, &amp;lt;i&amp;gt;r&amp;lt;/i&amp;gt;       &amp;lt;tab/&amp;gt;&amp;lt;tab/&amp;gt;(N, Z, C) &lt;br/&gt;L:[64+r]          &amp;lt;tab/&amp;gt;COMP B, &amp;lt;i&amp;gt;r&amp;lt;/i&amp;gt;       &amp;lt;tab/&amp;gt;&amp;lt;tab/&amp;gt;(N, Z, C) &lt;br/&gt;L:[68+r]          &amp;lt;tab/&amp;gt;COMP X, &amp;lt;i&amp;gt;r&amp;lt;/i&amp;gt;       &amp;lt;tab/&amp;gt;&amp;lt;tab/&amp;gt;(N, Z, C) &lt;br/&gt;L:[6C+r]          &amp;lt;tab/&amp;gt;COMP Y, &amp;lt;i&amp;gt;r&amp;lt;/i&amp;gt;       &amp;lt;tab/&amp;gt;&amp;lt;tab/&amp;gt;(N, Z, C) &lt;br/&gt;L:[70+r] [vv]     &amp;lt;tab/&amp;gt;COMP &amp;lt;i&amp;gt;#val&amp;lt;/i&amp;gt;, &amp;lt;i&amp;gt;r&amp;lt;/i&amp;gt; &amp;lt;tab/&amp;gt;&amp;lt;tab/&amp;gt;(N, Z, C) &lt;br/&gt;L:[F8+r] [mh] [ll]&amp;lt;tab/&amp;gt;COMP &amp;lt;i&amp;gt;ADDR&amp;lt;/i&amp;gt;, &amp;lt;i&amp;gt;r&amp;lt;/i&amp;gt; &amp;lt;tab/&amp;gt;&amp;lt;tab/&amp;gt;(N, Z, C) &lt;br/&gt;L:[DD] [vv] [mh] [ll] COMP &amp;lt;i&amp;gt;#val&amp;lt;/i&amp;gt;, &amp;lt;i&amp;gt;ADDR&amp;lt;/i&amp;gt;&amp;lt;tab/&amp;gt;(N, Z, C) &lt;br/&gt;&lt;br/&gt;T:Unäre Operationen&lt;br/&gt;L:[20+r]          &amp;lt;tab/&amp;gt;CLR &amp;lt;i&amp;gt;r&amp;lt;/i&amp;gt;        &amp;lt;tab/&amp;gt;&amp;lt;tab/&amp;gt;(N=0, Z=0) &lt;br/&gt;L:[24+r]          &amp;lt;tab/&amp;gt;NOT &amp;lt;i&amp;gt;r&amp;lt;/i&amp;gt;        &amp;lt;tab/&amp;gt;&amp;lt;tab/&amp;gt;(N, Z) &lt;br/&gt;L:[28+r]          &amp;lt;tab/&amp;gt;INC &amp;lt;i&amp;gt;r&amp;lt;/i&amp;gt;        &amp;lt;tab/&amp;gt;&amp;lt;tab/&amp;gt;(N, Z) &lt;br/&gt;L:[2C+r]          &amp;lt;tab/&amp;gt;DEC &amp;lt;i&amp;gt;r&amp;lt;/i&amp;gt;        &amp;lt;tab/&amp;gt;&amp;lt;tab/&amp;gt;(N, Z) &lt;br/&gt;L:[A8] [mh] [ll]  &amp;lt;tab/&amp;gt;CLR &amp;lt;i&amp;gt;ADDR&amp;lt;/i&amp;gt;     &amp;lt;tab/&amp;gt;&amp;lt;tab/&amp;gt;(N=0, Z=0) &lt;br/&gt;L:[A9] [mh] [ll]  &amp;lt;tab/&amp;gt;NOT &amp;lt;i&amp;gt;ADDR&amp;lt;/i&amp;gt;     &amp;lt;tab/&amp;gt;&amp;lt;tab/&amp;gt;(N, Z) &lt;br/&gt;L:[AA] [mh] [ll]  &amp;lt;tab/&amp;gt;INC &amp;lt;i&amp;gt;ADDR&amp;lt;/i&amp;gt;     &amp;lt;tab/&amp;gt;&amp;lt;tab/&amp;gt;(N, Z) &lt;br/&gt;L:[AB] [mh] [ll]  &amp;lt;tab/&amp;gt;DEC &amp;lt;i&amp;gt;ADDR&amp;lt;/i&amp;gt;    &amp;lt;tab/&amp;gt;&amp;lt;tab/&amp;gt;(N, Z) &lt;br/&gt;&lt;br/&gt;T:Rotationen&lt;br/&gt;L:[30+r]          &amp;lt;tab/&amp;gt;RL &amp;lt;i&amp;gt;r&amp;lt;/i&amp;gt;           &amp;lt;tab/&amp;gt;&amp;lt;tab/&amp;gt;(N, Z, C) &lt;br/&gt;L:[34+r]          &amp;lt;tab/&amp;gt;RR &amp;lt;i&amp;gt;r&amp;lt;/i&amp;gt;           &amp;lt;tab/&amp;gt;&amp;lt;tab/&amp;gt;(N, Z, C) &lt;br/&gt;L:[38+r]          &amp;lt;tab/&amp;gt;RLC &amp;lt;i&amp;gt;r&amp;lt;/i&amp;gt;          &amp;lt;tab/&amp;gt;&amp;lt;tab/&amp;gt;(N, Z, C) &lt;br/&gt;L:[3C+r]          &amp;lt;tab/&amp;gt;RRC &amp;lt;i&amp;gt;r&amp;lt;/i&amp;gt;          &amp;lt;tab/&amp;gt;&amp;lt;tab/&amp;gt;(N, Z, C) &lt;br/&gt;L:[AC] [mh] [ll]  &amp;lt;tab/&amp;gt;RL &amp;lt;i&amp;gt;ADDR&amp;lt;/i&amp;gt;        &amp;lt;tab/&amp;gt;&amp;lt;tab/&amp;gt;(N, Z, C) &lt;br/&gt;L:[AD] [mh] [ll]  &amp;lt;tab/&amp;gt;RR &amp;lt;i&amp;gt;ADDR&amp;lt;/i&amp;gt;        &amp;lt;tab/&amp;gt;&amp;lt;tab/&amp;gt;(N, Z, C) &lt;br/&gt;L:[AE] [mh] [ll]  &amp;lt;tab/&amp;gt;RLC &amp;lt;i&amp;gt;ADDR&amp;lt;/i&amp;gt;       &amp;lt;tab/&amp;gt;&amp;lt;tab/&amp;gt;(N, Z, C) &lt;br/&gt;L:[AF] [mh] [ll]  &amp;lt;tab/&amp;gt;RRC &amp;lt;i&amp;gt;ADDR&amp;lt;/i&amp;gt;       &amp;lt;tab/&amp;gt;&amp;lt;tab/&amp;gt;(N, Z, C) &lt;br/&gt;&lt;br/&gt;T:Sprünge &lt;br/&gt;L:[10] [mh] [ll]&amp;lt;tab/&amp;gt;JUMP &amp;lt;i&amp;gt;ADDR&amp;lt;/i&amp;gt; &lt;br/&gt;L:[12] [mh] [ll]&amp;lt;tab/&amp;gt;JUMP,EQ &amp;lt;i&amp;gt;ADDR&amp;lt;/i&amp;gt; &lt;br/&gt;L:[12] [mh] [ll]&amp;lt;tab/&amp;gt;JUMP,ZS &amp;lt;i&amp;gt;ADDR&amp;lt;/i&amp;gt; &lt;br/&gt;L:[13] [mh] [ll]&amp;lt;tab/&amp;gt;JUMP,NE &amp;lt;i&amp;gt;ADDR&amp;lt;/i&amp;gt; &lt;br/&gt;L:[13] [mh] [ll]&amp;lt;tab/&amp;gt;JUMP,ZC &amp;lt;i&amp;gt;ADDR&amp;lt;/i&amp;gt; &lt;br/&gt;L:[14] [mh] [ll]&amp;lt;tab/&amp;gt;JUMP,LO &amp;lt;i&amp;gt;ADDR&amp;lt;/i&amp;gt; &lt;br/&gt;L:[14] [mh] [ll]&amp;lt;tab/&amp;gt;JUMP,CS &amp;lt;i&amp;gt;ADDR&amp;lt;/i&amp;gt; &lt;br/&gt;L:[15] [mh] [ll]&amp;lt;tab/&amp;gt;JUMP,HS &amp;lt;i&amp;gt;ADDR&amp;lt;/i&amp;gt; &lt;br/&gt;L:[15] [mh] [ll]&amp;lt;tab/&amp;gt;JUMP,CC &amp;lt;i&amp;gt;ADDR&amp;lt;/i&amp;gt; &lt;br/&gt;L:[16] [mh] [ll]&amp;lt;tab/&amp;gt;JUMP,LS &amp;lt;i&amp;gt;ADDR&amp;lt;/i&amp;gt; &lt;br/&gt;L:[17] [mh] [ll]&amp;lt;tab/&amp;gt;JUMP,HI &amp;lt;i&amp;gt;ADDR&amp;lt;/i&amp;gt; &lt;br/&gt;L:[18] [mh] [ll]&amp;lt;tab/&amp;gt;JUMP,NS &amp;lt;i&amp;gt;ADDR&amp;lt;/i&amp;gt; &lt;br/&gt;L:[19] [mh] [ll]&amp;lt;tab/&amp;gt;JUMP,NC &amp;lt;i&amp;gt;ADDR&amp;lt;/i&amp;gt; &lt;br/&gt;&lt;br/&gt;T:Routinen aufrufen &lt;br/&gt;L:[01] [mh] [ll]   &amp;lt;tab/&amp;gt;CALL &amp;lt;i&amp;gt;ADDR&amp;lt;/i&amp;gt; &lt;br/&gt;L:[02]             &amp;lt;tab/&amp;gt;RET &lt;br/&gt;&lt;br/&gt;T:Benutzung des Stapels &lt;br/&gt;L:[08+r]           &amp;lt;tab/&amp;gt;PUSH &amp;lt;i&amp;gt;r&amp;lt;/i&amp;gt; &lt;br/&gt;L:[FC]             &amp;lt;tab/&amp;gt;PUSH F &lt;br/&gt;L:[0C+r]           &amp;lt;tab/&amp;gt;POP &amp;lt;i&amp;gt;r&amp;lt;/i&amp;gt; &lt;br/&gt;L:[FD]             &amp;lt;tab/&amp;gt;POP F                     &amp;lt;tab/&amp;gt;(N, Z, C) &lt;br/&gt;L:[07] [vv]        &amp;lt;tab/&amp;gt;SUB &amp;lt;i&amp;gt;#val&amp;lt;/i&amp;gt;, SP &lt;br/&gt;L:[06] [vv]        &amp;lt;tab/&amp;gt;ADD &amp;lt;i&amp;gt;#val&amp;lt;/i&amp;gt;, SP &lt;br/&gt;L:[54+r] [40] [dd] &amp;lt;tab/&amp;gt;MOVE {SP}+depl, &amp;lt;i&amp;gt;r&amp;lt;/i&amp;gt; &amp;lt;tab/&amp;gt;(N, Z) &lt;br/&gt;L:[58+r] [40] [dd] &amp;lt;tab/&amp;gt;MOVE &amp;lt;i&amp;gt;r&amp;lt;/i&amp;gt;, {SP}+depl &amp;lt;tab/&amp;gt;(N, Z) &lt;br/&gt;&lt;br/&gt;T:Flags bearbeiten &lt;br/&gt;L:[04]             &amp;lt;tab/&amp;gt;SETC           &amp;lt;tab/&amp;gt;&amp;lt;tab/&amp;gt;(C=1) &lt;br/&gt;L:[05]             &amp;lt;tab/&amp;gt;CLRC           &amp;lt;tab/&amp;gt;&amp;lt;tab/&amp;gt;(C=0) &lt;br/&gt;L:[FE]             &amp;lt;tab/&amp;gt;NOTC           &amp;lt;tab/&amp;gt;&amp;lt;tab/&amp;gt;(C) &lt;br/&gt;&lt;br/&gt;T:Verschiedenes&lt;br/&gt;L:[00]            &amp;lt;tab/&amp;gt;NOP &lt;br/&gt;L:[03]            &amp;lt;tab/&amp;gt;HALT &lt;br/&gt;L:[5C]            &amp;lt;tab/&amp;gt;EX A, B &lt;br/&gt;L:[5D]            &amp;lt;tab/&amp;gt;EX X, Y &lt;br/&gt;L:[5E]            &amp;lt;tab/&amp;gt;SWAP A &lt;br/&gt;L:[5F]            &amp;lt;tab/&amp;gt;SWAP B &lt;br/&gt;</data>
  <data id="2G5">T:_WaitKey &lt;br/&gt;L:Wartet auf einen Tastendruck. &lt;br/&gt;L:[01] [08] [03]&amp;lt;tab/&amp;gt;CALL H'803 &lt;br/&gt;L:in&amp;lt;tab/&amp;gt;- &lt;br/&gt;L:out&amp;lt;tab/&amp;gt;A gedrückte Taste &lt;br/&gt;L:mod&amp;lt;tab/&amp;gt;A, F &lt;br/&gt;&lt;br/&gt;T:_WaitSec &lt;br/&gt;L:Wartet eine bestimmte Anzahl halber Sekunden. Die Wartezeit ist für 1'000 Anweisungen/Sek. kalibriert. &lt;br/&gt;L:[01] [08] [06]&amp;lt;tab/&amp;gt;CALL H'806 &lt;br/&gt;L:in&amp;lt;tab/&amp;gt;A Anzahl Sekunden &lt;br/&gt;L:out&amp;lt;tab/&amp;gt;- &lt;br/&gt;L:mod&amp;lt;tab/&amp;gt;F &lt;br/&gt;&lt;br/&gt;T:_DisplayBinaryDigit &lt;br/&gt;L:Steuert eine 7-Segment-Anzeige an. &lt;br/&gt;L:[01] [08] [09]&amp;lt;tab/&amp;gt;CALL H'809 &lt;br/&gt;L:in&amp;lt;tab/&amp;gt;A Bits der verschiedenen Segmente &lt;br/&gt;L:&amp;lt;tab/&amp;gt;B Stelle 0..3 (von links nach rechts) &lt;br/&gt;L:out&amp;lt;tab/&amp;gt;- &lt;br/&gt;L:mod&amp;lt;tab/&amp;gt;F &lt;br/&gt;&lt;br/&gt;T:_DisplayHexaDigit &lt;br/&gt;L:Zeigt eine Hexadezimalziffer an. &lt;br/&gt;L:[01] [08] [0C]&amp;lt;tab/&amp;gt;CALL H'80C &lt;br/&gt;L:in&amp;lt;tab/&amp;gt;A Wert 0..15 &lt;br/&gt;L:&amp;lt;tab/&amp;gt;B Stelle 0..3 (von links nach rechts) &lt;br/&gt;L:out&amp;lt;tab/&amp;gt;- &lt;br/&gt;L:mod&amp;lt;tab/&amp;gt;F &lt;br/&gt;&lt;br/&gt;T:_DisplayHexaByte &lt;br/&gt;L:Zeigt ein Byte in Hexadezimal auf zwei Stellen an. &lt;br/&gt;L:[01] [08] [0F]&amp;lt;tab/&amp;gt;CALL H'80F &lt;br/&gt;L:in&amp;lt;tab/&amp;gt;A Wert 0..255 &lt;br/&gt;L:&amp;lt;tab/&amp;gt;B erste Stelle 0..2 (von links nach rechts) &lt;br/&gt;L:out&amp;lt;tab/&amp;gt;- &lt;br/&gt;L:mod&amp;lt;tab/&amp;gt;F &lt;br/&gt;&lt;br/&gt;T:_ClearScreen &lt;br/&gt;L:Löscht den Bildschirm. &lt;br/&gt;L:[01] [08] [1E]&amp;lt;tab/&amp;gt;CALL H'81E &lt;br/&gt;L:in&amp;lt;tab/&amp;gt;- &lt;br/&gt;L:out&amp;lt;tab/&amp;gt;- &lt;br/&gt;L:mod&amp;lt;tab/&amp;gt;F &lt;br/&gt;&lt;br/&gt;T:_SetPixel &lt;br/&gt;L:Setzt einen Pixel im Bildschirm auf 1 (bringt den Bildpunkt zum Leuchten). &lt;br/&gt;L:[01] [08] [15]&amp;lt;tab/&amp;gt;CALL H'815 &lt;br/&gt;L:in&amp;lt;tab/&amp;gt;X Spalte 0..31 &lt;br/&gt;L:&amp;lt;tab/&amp;gt;Y Zeile 0..23 &lt;br/&gt;L:out&amp;lt;tab/&amp;gt;- &lt;br/&gt;L:mod&amp;lt;tab/&amp;gt;F &lt;br/&gt;&lt;br/&gt;T:_ClrPixel &lt;br/&gt;L:Setzt einen Pixel im Bildschirm auf 0 (löscht den Bildpunkt). &lt;br/&gt;L:[01] [08] [18]&amp;lt;tab/&amp;gt;CALL H'818 &lt;br/&gt;L:in&amp;lt;tab/&amp;gt;X Spalte 0..31 &lt;br/&gt;L:&amp;lt;tab/&amp;gt;Y Zeile 0..23 &lt;br/&gt;L:out&amp;lt;tab/&amp;gt;- &lt;br/&gt;L:mod&amp;lt;tab/&amp;gt;F &lt;br/&gt;&lt;br/&gt;T:_NotPixel &lt;br/&gt;L:Kehrt einen Pixel im Bildschirm um. &lt;br/&gt;L:[01] [08] [1B]&amp;lt;tab/&amp;gt;CALL H'81B &lt;br/&gt;L:in&amp;lt;tab/&amp;gt;X Spalte 0..31 &lt;br/&gt;L:&amp;lt;tab/&amp;gt;Y Zeile 0..23 &lt;br/&gt;L:out&amp;lt;tab/&amp;gt;- &lt;br/&gt;L:mod&amp;lt;tab/&amp;gt;F &lt;br/&gt;&lt;br/&gt;T:_TestPixel &lt;br/&gt;L:Testet einen Pixel im Bildschirm. &lt;br/&gt;L:[01] [08] [2A]&amp;lt;tab/&amp;gt;CALL H'82A &lt;br/&gt;L:in&amp;lt;tab/&amp;gt;X Spalte 0..31 &lt;br/&gt;L:&amp;lt;tab/&amp;gt;Y Zeile 0..23 &lt;br/&gt;L:out&amp;lt;tab/&amp;gt;EQ wenn der Pixel auf 0 (gelöscht) ist &lt;br/&gt;L:&amp;lt;tab/&amp;gt;NE wenn der Pixel auf 1 ist (leuchtet) &lt;br/&gt;L:mod&amp;lt;tab/&amp;gt;F &lt;br/&gt;&lt;br/&gt;T:_DrawChar &lt;br/&gt;L:Schreibt ein alphanumerisches Zeichen auf den Bildschirm. Die Zahlen haben einen Code von H'30 bis H'39, die Buchstaben einen Code von H'41 bis H'5A. &lt;br/&gt;L:[01] [08] [21]&amp;lt;tab/&amp;gt;CALL H'821 &lt;br/&gt;L:in&amp;lt;tab/&amp;gt;A ASCII-Code des Zeichens&lt;br/&gt;L:&amp;lt;tab/&amp;gt;X Spalte 0..7 &lt;br/&gt;L:&amp;lt;tab/&amp;gt;Y Zeile 0..3 &lt;br/&gt;L:out&amp;lt;tab/&amp;gt;- &lt;br/&gt;L:mod&amp;lt;tab/&amp;gt;F &lt;br/&gt;&lt;br/&gt;T:_DrawHexaDigit &lt;br/&gt;L:Schreibt eine Hexadezimalziffer auf den Bildschirm. &lt;br/&gt;L:[01] [08] [24]&amp;lt;tab/&amp;gt;CALL H'824 &lt;br/&gt;L:in&amp;lt;tab/&amp;gt;A Wert 0..15 &lt;br/&gt;L:&amp;lt;tab/&amp;gt;X Spalte 0..7 &lt;br/&gt;L:&amp;lt;tab/&amp;gt;Y Zeile 0..3 &lt;br/&gt;L:out&amp;lt;tab/&amp;gt;- &lt;br/&gt;L:mod&amp;lt;tab/&amp;gt;F &lt;br/&gt;&lt;br/&gt;T:_DrawHexaByte &lt;br/&gt;L:Schreibt ein Byte in Hexadezimal mit zwei Stellen auf den Bildschirm. &lt;br/&gt;L:[01] [08] [27]&amp;lt;tab/&amp;gt;CALL H'827 &lt;br/&gt;L:in&amp;lt;tab/&amp;gt;A Wert 0..255 &lt;br/&gt;L:&amp;lt;tab/&amp;gt;X Spalte 0..6 &lt;br/&gt;L:&amp;lt;tab/&amp;gt;Y Zeile 0..3 &lt;br/&gt;L:out&amp;lt;tab/&amp;gt;- &lt;br/&gt;L:mod&amp;lt;tab/&amp;gt;F &lt;br/&gt;</data>
  <data id="2H5">www.epsitec.ch/index-d</data>
  <data id="2I5">www.epsitec.ch/dauphin-d</data>
</bundle>