<?xml version="1.0" encoding="utf-16"?>
<Dolphin>
  <Version>1.1.3</Version>
  <ProcessorName>PSI30</ProcessorName>
  <ProcessorIPS>10000</ProcessorIPS>
  <ProcessorStep>C</ProcessorStep>
  <ProcessorInto>O</ProcessorInto>
  <PanelMode>Calm</PanelMode>
  <DisplayBitmap>Y</DisplayBitmap>
  <DisplayTechno>CRT</DisplayTechno>
  <KeyboardArrows>N</KeyboardArrows>
  <Rem>Affiche simplement les caractères HELLO sur l&amp;apos;écran bitmap, à la fréquence de seulement 100 IPS, pour bien sentir la complexité d&amp;apos;une telle opération.</Rem>
  <Source>&lt;tab/&gt;BULLETY1 = 0; Position Y of the first bullet&lt;tab/&gt;    &lt;br/&gt;&lt;tab/&gt;BULLETX1 = 1; Position X of the first bullet&lt;tab/&gt; &lt;br/&gt;    BULLETY2 = 2; Position Y of the second bullet&lt;tab/&gt;&lt;tab/&gt;    &lt;br/&gt;&lt;tab/&gt;BULLETX2 = 3; Position X of the second bullet&lt;tab/&gt; &lt;br/&gt;    BULLETY3 = 4; Position Y of the third bullet&lt;tab/&gt;&lt;tab/&gt;    &lt;br/&gt;&lt;tab/&gt;BULLETX3 = 5; Position X of the third bullet&lt;tab/&gt; &lt;br/&gt;    OFFSET = 6; Get the width of the console &lt;br/&gt;    RNDB1 = 7;Random bullet 1 height &lt;br/&gt;    RNDB2 = 8;Random bullet 2 height &lt;br/&gt;    RNDB3 = 9;Random bullet 3 height &lt;br/&gt;    SCOREDIGIT1 = 10 ; Score (First digit on the 7segment) 0, 1, 2, 3 &lt;br/&gt;    SCOREDIGIT2 = 11 ; Score (Second digit on the 7segment) 00 10, 20, 30 &lt;br/&gt;    LIFES = 12 ; Lifes of the ship &lt;br/&gt;&lt;tab/&gt;LENGTH = 13; Lenght of the array &lt;br/&gt; &lt;br/&gt;    ; Constants &lt;br/&gt;    LIFEPOS = 0 ; Position of the life in the 7-segment &lt;br/&gt;    SCOREPOS1 = 3 ; Position of the score digit in the 7-segment &lt;br/&gt;    SCOREPOS2 = 2 ; Position of the 2nd score digit in the 7-segment &lt;br/&gt; &lt;br/&gt;    .LOC&lt;tab/&gt;0  &lt;br/&gt;&lt;tab/&gt;SUB&lt;tab/&gt;#LENGTH, SP &lt;br/&gt; &lt;br/&gt;    ; Set the score and life &lt;br/&gt;    MOVE    #3, {SP}+LIFES ; Move 3 to the lifes &lt;br/&gt;    MOVE    #0, {SP}+SCOREDIGIT1 ; Move 0 to the 1st score digit &lt;br/&gt;    MOVE    #0, {SP}+SCOREDIGIT2 ; Move 0 to the 2nd score digit &lt;br/&gt; &lt;br/&gt;    ; Get the width - 1 &lt;br/&gt;    MOVE    #_BITMAPWIDTH, {SP}+OFFSET &lt;br/&gt; &lt;br/&gt;    ; Bullet 1 &lt;br/&gt;    MOVE&lt;tab/&gt;{SP}+OFFSET, B &lt;br/&gt;&lt;tab/&gt;MOVE    B, {SP}+BULLETX1 &lt;br/&gt;&lt;tab/&gt;MOVE&lt;tab/&gt;#4, {SP}+BULLETY1 &lt;br/&gt; &lt;br/&gt;    ; Bullet 2 &lt;br/&gt;    SUB     #5, {SP}+OFFSET  &lt;br/&gt;    MOVE&lt;tab/&gt;{SP}+OFFSET, B &lt;br/&gt;    MOVE&lt;tab/&gt;B, {SP}+BULLETX2  &lt;br/&gt;&lt;tab/&gt;MOVE&lt;tab/&gt;#12, {SP}+BULLETY2 &lt;br/&gt; &lt;br/&gt;    ; Bullet 3 &lt;br/&gt;    ADD     #2, {SP}+OFFSET &lt;br/&gt;    MOVE&lt;tab/&gt;{SP}+OFFSET, B &lt;br/&gt;    MOVE&lt;tab/&gt;B, {SP}+BULLETX3 &lt;br/&gt;&lt;tab/&gt;MOVE&lt;tab/&gt;#20, {SP}+BULLETY3 &lt;br/&gt; &lt;br/&gt;    ; **********************Set the 7-segment***********************    &lt;br/&gt;    ; Display Life &lt;br/&gt;    MOVE    {SP}+LIFES, A &lt;br/&gt;    MOVE    #LIFEPOS, B &lt;br/&gt;    CALL    _DisplayHexaDigit &lt;br/&gt; &lt;br/&gt;    ; Display separator &lt;br/&gt;    MOVE    #1, A &lt;br/&gt;    RL      A &lt;br/&gt;    RL      A &lt;br/&gt;    RL      A &lt;br/&gt;    RL      A &lt;br/&gt;    RL      A &lt;br/&gt;    RL      A &lt;br/&gt;    MOVE    A, _DIGIT1 &lt;br/&gt; &lt;br/&gt;    ; Display &lt;br/&gt;    MOVE    {SP}+SCOREDIGIT1, A &lt;br/&gt;    MOVE    #SCOREPOS1, B &lt;br/&gt;    CALL    DISPLAYDIGIT &lt;br/&gt; &lt;br/&gt;    ; Display &lt;br/&gt;    MOVE    {SP}+SCOREDIGIT2, A &lt;br/&gt;    MOVE    #SCOREPOS2, B &lt;br/&gt;    CALL    DISPLAYDIGIT &lt;br/&gt;  &lt;br/&gt;; **************************************************************    &lt;br/&gt;; ********************Start of the program**********************    &lt;br/&gt;; **************************************************************    &lt;br/&gt;START:   &lt;br/&gt;   &lt;br/&gt;; **************************************************************    &lt;br/&gt;; *************************Bullet turn**************************    &lt;br/&gt;; **************************************************************    &lt;br/&gt;BULLET:  &lt;br/&gt;&lt;tab/&gt;DEC&lt;tab/&gt;&lt;tab/&gt;{SP}+BULLETX1&lt;tab/&gt;&lt;tab/&gt;; Get left the bullet &lt;br/&gt;&lt;tab/&gt;DEC&lt;tab/&gt;&lt;tab/&gt;{SP}+BULLETX2&lt;tab/&gt;&lt;tab/&gt;; Get left the bullet &lt;br/&gt;&lt;tab/&gt;DEC&lt;tab/&gt;&lt;tab/&gt;{SP}+BULLETX3&lt;tab/&gt;&lt;tab/&gt;; Get left the bullet &lt;br/&gt;BULLETLEFT: &lt;br/&gt;&lt;tab/&gt;; Get the bullets position and place bullets &lt;br/&gt;    MOVE&lt;tab/&gt;{SP}+BULLETY1, Y &lt;br/&gt;    MOVE    {SP}+BULLETX1, X &lt;br/&gt;    CALL    PLACEBULLET &lt;br/&gt; &lt;br/&gt;    MOVE&lt;tab/&gt;{SP}+BULLETY2, Y &lt;br/&gt;    MOVE    {SP}+BULLETX2, X &lt;br/&gt;    CALL    PLACEBULLET &lt;br/&gt; &lt;br/&gt;    MOVE&lt;tab/&gt;{SP}+BULLETY3, Y &lt;br/&gt;    MOVE    {SP}+BULLETX3, X &lt;br/&gt;    CALL    PLACEBULLET &lt;br/&gt; &lt;br/&gt;&lt;tab/&gt;PUSH&lt;tab/&gt;A &lt;br/&gt;&lt;tab/&gt;MOVE&lt;tab/&gt;#1, A &lt;br/&gt;&lt;tab/&gt;CALL&lt;tab/&gt;_WaitSec&lt;tab/&gt;&lt;tab/&gt;; wait... &lt;br/&gt;&lt;tab/&gt;POP&lt;tab/&gt;A &lt;br/&gt; &lt;br/&gt;&lt;tab/&gt;; Get the bullets position and erase bullets &lt;br/&gt;    MOVE&lt;tab/&gt;{SP}+BULLETY1, Y &lt;br/&gt;    MOVE    {SP}+BULLETX1, X &lt;br/&gt;    CALL    PLACEBULLET &lt;br/&gt; &lt;br/&gt;    MOVE&lt;tab/&gt;{SP}+BULLETY2, Y &lt;br/&gt;    MOVE    {SP}+BULLETX2, X &lt;br/&gt;    CALL    PLACEBULLET &lt;br/&gt; &lt;br/&gt;    MOVE&lt;tab/&gt;{SP}+BULLETY3, Y &lt;br/&gt;    MOVE    {SP}+BULLETX3, X &lt;br/&gt;    CALL    PLACEBULLET &lt;br/&gt; &lt;br/&gt;    ADD     #1, {SP}+RNDB1 &lt;br/&gt;    COMP    #_BITMAPHEIGHT, {SP}+RNDB1 &lt;br/&gt;    JUMP,EQ RANDOM1 &lt;br/&gt;BACKRANDOM2: &lt;br/&gt;    SUB     #1, {SP}+RNDB2 &lt;br/&gt;    COMP    #1, {SP}+RNDB2 &lt;br/&gt;    JUMP,EQ RANDOM2 &lt;br/&gt;BACKRANDOM3: &lt;br/&gt;    ADD     #1, {SP}+RNDB3 &lt;br/&gt;    COMP    #_BITMAPHEIGHT, {SP}+RNDB3 &lt;br/&gt;    JUMP,EQ RANDOM3 &lt;br/&gt; &lt;br/&gt;; **************************************************************    &lt;br/&gt;; ***********Check the positions of the first bullet************    &lt;br/&gt;; **************************************************************    &lt;br/&gt;NEWBULLET1POSITION: &lt;br/&gt;    MOVE    {SP}+BULLETX1, X ; Is not at position 0 &lt;br/&gt;    COMP    #0, X &lt;br/&gt;    JUMP,HI NEWBULLET2POSITION ; NO -&amp;gt; NEWBULLET2POSITION &lt;br/&gt;    MOVE    #_BITMAPWIDTH, {SP}+BULLETX1 &lt;br/&gt;    ; YES -&amp;gt; Move the bullet &lt;br/&gt;    MOVE    {SP}+RNDB1, Y       &lt;br/&gt;    MOVE    Y, {SP}+BULLETY1 &lt;br/&gt; &lt;br/&gt;; **************************************************************    &lt;br/&gt;; ****************Score update of first bullet******************    &lt;br/&gt;; **************************************************************    &lt;br/&gt;SCORE1:  &lt;br/&gt; &lt;br/&gt;    COMP    #9, {SP}+SCOREDIGIT1 ; Score digit 1 is equal 9 &lt;br/&gt;    JUMP,EQ UPDATE1DIGIT2 &lt;br/&gt;  &lt;br/&gt;    ; Increment score &lt;br/&gt;    INC     {SP}+SCOREDIGIT1 &lt;br/&gt; &lt;br/&gt;    ; Move variables &lt;br/&gt;    MOVE    {SP}+SCOREDIGIT1, A &lt;br/&gt;    MOVE    #SCOREPOS1, B &lt;br/&gt; &lt;br/&gt;    ; Display &lt;br/&gt;    CALL    DISPLAYDIGIT &lt;br/&gt; &lt;br/&gt;    JUMP    NEWBULLET2POSITION &lt;br/&gt; &lt;br/&gt;UPDATE1DIGIT2: &lt;br/&gt; &lt;br/&gt;    ; Compare the second digit to update it &lt;br/&gt;    COMP    #9, {SP}+SCOREDIGIT2 ; Score digit 2 is equal 9 &lt;br/&gt;    JUMP,EQ WIN ; YES -&amp;gt; Win the game &lt;br/&gt;    ; NO -&amp;gt; Continue up second digit &lt;br/&gt;    INC     {SP}+SCOREDIGIT2 &lt;br/&gt;    MOVE    #0, {SP}+SCOREDIGIT1 ; Reset the score digit 1 &lt;br/&gt; &lt;br/&gt;    ; Move variables &lt;br/&gt;    MOVE    {SP}+SCOREDIGIT2, A &lt;br/&gt;    MOVE    #SCOREPOS2, B &lt;br/&gt; &lt;br/&gt;    ; Display &lt;br/&gt;    CALL    DISPLAYDIGIT &lt;br/&gt; &lt;br/&gt;    ; Move variables &lt;br/&gt;    MOVE    {SP}+SCOREDIGIT1, A &lt;br/&gt;    MOVE    #SCOREPOS1, B &lt;br/&gt; &lt;br/&gt;    ; Display &lt;br/&gt;    CALL    DISPLAYDIGIT &lt;br/&gt; &lt;br/&gt;; **************************************************************    &lt;br/&gt;; ***********Check the positions of the second bullet***********    &lt;br/&gt;; **************************************************************    &lt;br/&gt;NEWBULLET2POSITION: &lt;br/&gt;    MOVE    {SP}+BULLETX2, X ; Is not at position 0 &lt;br/&gt;    COMP    #0, X &lt;br/&gt;    JUMP,HI NEWBULLET3POSITION ; NO -&amp;gt; NEWBULLET2POSITION &lt;br/&gt;    MOVE    #_BITMAPWIDTH, {SP}+BULLETX2 &lt;br/&gt;    ; YES -&amp;gt; Move the bullet &lt;br/&gt;    MOVE    {SP}+RNDB2, Y       &lt;br/&gt;    MOVE    Y, {SP}+BULLETY2 &lt;br/&gt; &lt;br/&gt;; **************************************************************    &lt;br/&gt;; ****************Score update of second bullet*****************    &lt;br/&gt;; **************************************************************    &lt;br/&gt;SCORE2:  &lt;br/&gt; &lt;br/&gt;    COMP    #9, {SP}+SCOREDIGIT1 ; Score digit 1 is equal 9 &lt;br/&gt;    JUMP,EQ UPDATE2DIGIT2 &lt;br/&gt;  &lt;br/&gt;    ; Increment score &lt;br/&gt;    INC     {SP}+SCOREDIGIT1 &lt;br/&gt; &lt;br/&gt;    ; Move variables &lt;br/&gt;    MOVE    {SP}+SCOREDIGIT1, A &lt;br/&gt;    MOVE    #SCOREPOS1, B &lt;br/&gt; &lt;br/&gt;    ; Display &lt;br/&gt;    CALL    DISPLAYDIGIT &lt;br/&gt; &lt;br/&gt;    JUMP    NEWBULLET3POSITION &lt;br/&gt; &lt;br/&gt;UPDATE2DIGIT2: &lt;br/&gt; &lt;br/&gt;    ; Compare the second digit to update it &lt;br/&gt;    COMP    #9, {SP}+SCOREDIGIT2 ; Score digit 2 is equal 9 &lt;br/&gt;    JUMP,EQ WIN ; YES -&amp;gt; Win the game &lt;br/&gt;    ; NO -&amp;gt; Continue up second digit &lt;br/&gt;    INC     {SP}+SCOREDIGIT2 &lt;br/&gt;    MOVE    #0, {SP}+SCOREDIGIT1 ; Reset the score digit 1 &lt;br/&gt; &lt;br/&gt;    ; Move variables &lt;br/&gt;    MOVE    {SP}+SCOREDIGIT2, A &lt;br/&gt;    MOVE    #SCOREPOS2, B &lt;br/&gt; &lt;br/&gt;    ; Display &lt;br/&gt;    CALL    DISPLAYDIGIT &lt;br/&gt; &lt;br/&gt;    ; Move variables &lt;br/&gt;    MOVE    {SP}+SCOREDIGIT1, A &lt;br/&gt;    MOVE    #SCOREPOS1, B &lt;br/&gt; &lt;br/&gt;    ; Display &lt;br/&gt;    CALL    DISPLAYDIGIT &lt;br/&gt; &lt;br/&gt;; **************************************************************    &lt;br/&gt;; ***********Check the positions of the third bullet************    &lt;br/&gt;; **************************************************************    &lt;br/&gt;NEWBULLET3POSITION: &lt;br/&gt;    MOVE    {SP}+BULLETX3, X ; Is not at position 0 &lt;br/&gt;    COMP    #0, X &lt;br/&gt;    JUMP,HI START ; NO -&amp;gt; NEWBULLET2POSITION &lt;br/&gt;    MOVE    #_BITMAPWIDTH, {SP}+BULLETX3 &lt;br/&gt;    ; YES -&amp;gt; Move the bullet &lt;br/&gt;    MOVE    {SP}+RNDB3, Y       &lt;br/&gt;    MOVE    Y, {SP}+BULLETY3 &lt;br/&gt; &lt;br/&gt;; **************************************************************    &lt;br/&gt;; ****************Score update of second bullet*****************    &lt;br/&gt;; **************************************************************    &lt;br/&gt;SCORE3:  &lt;br/&gt; &lt;br/&gt;    COMP    #9, {SP}+SCOREDIGIT1 ; Score digit 1 is equal 9 &lt;br/&gt;    JUMP,EQ UPDATE3DIGIT2 &lt;br/&gt;  &lt;br/&gt;    ; Increment score &lt;br/&gt;    INC     {SP}+SCOREDIGIT1 &lt;br/&gt; &lt;br/&gt;    ; Move variables &lt;br/&gt;    MOVE    {SP}+SCOREDIGIT1, A &lt;br/&gt;    MOVE    #SCOREPOS1, B &lt;br/&gt; &lt;br/&gt;    ; Display &lt;br/&gt;    CALL    DISPLAYDIGIT &lt;br/&gt; &lt;br/&gt;    JUMP    RESTART &lt;br/&gt; &lt;br/&gt;UPDATE3DIGIT2: &lt;br/&gt; &lt;br/&gt;    ; Compare the second digit to update it &lt;br/&gt;    COMP    #9, {SP}+SCOREDIGIT2 ; Score digit 2 is equal 9 &lt;br/&gt;    JUMP,EQ WIN ; YES -&amp;gt; Win the game &lt;br/&gt;    ; NO -&amp;gt; Continue up second digit &lt;br/&gt;    INC     {SP}+SCOREDIGIT2 &lt;br/&gt;    MOVE    #0, {SP}+SCOREDIGIT1 ; Reset the score digit 1 &lt;br/&gt; &lt;br/&gt;    ; Move variables &lt;br/&gt;    MOVE    {SP}+SCOREDIGIT2, A &lt;br/&gt;    MOVE    #SCOREPOS2, B &lt;br/&gt; &lt;br/&gt;    ; Display &lt;br/&gt;    CALL    DISPLAYDIGIT &lt;br/&gt; &lt;br/&gt;    ; Move variables &lt;br/&gt;    MOVE    {SP}+SCOREDIGIT1, A &lt;br/&gt;    MOVE    #SCOREPOS1, B &lt;br/&gt; &lt;br/&gt;    ; Display &lt;br/&gt;    CALL    DISPLAYDIGIT &lt;br/&gt; &lt;br/&gt;; **************************************************************    &lt;br/&gt;; *********************Restart the loop*************************    &lt;br/&gt;; **************************************************************   &lt;br/&gt;RESTART: &lt;br/&gt;     &lt;br/&gt;    JUMP&lt;tab/&gt;START&lt;tab/&gt;&lt;tab/&gt;; Restart the method &lt;br/&gt; &lt;br/&gt;; **************************************************************    &lt;br/&gt;; ****************Reset the random 1 variable*******************    &lt;br/&gt;; **************************************************************   &lt;br/&gt;RANDOM1: &lt;br/&gt;    MOVE    #0, {SP}+RNDB1 &lt;br/&gt;    JUMP    BACKRANDOM2 &lt;br/&gt; &lt;br/&gt;; **************************************************************    &lt;br/&gt;; ****************Reset the random 2 variable*******************    &lt;br/&gt;; **************************************************************   &lt;br/&gt;RANDOM2: &lt;br/&gt;    MOVE    #_BITMAPHEIGHT, {SP}+RNDB2 &lt;br/&gt;    JUMP    BACKRANDOM3 &lt;br/&gt; &lt;br/&gt;; **************************************************************    &lt;br/&gt;; ****************Reset the random 3 variable*******************    &lt;br/&gt;; **************************************************************   &lt;br/&gt;RANDOM3: &lt;br/&gt;    MOVE    #0, {SP}+RNDB3 &lt;br/&gt;    JUMP    NEWBULLET1POSITION &lt;br/&gt; &lt;br/&gt;;**************************************************************    &lt;br/&gt;;*************Place the bullet at a precise place**************    &lt;br/&gt;;**************************************************************  &lt;br/&gt;PLACEBULLET: &lt;br/&gt;    ; Display bullet  &lt;br/&gt;    PUSH&lt;tab/&gt;Y &lt;br/&gt;    PUSH&lt;tab/&gt;X &lt;br/&gt;    CALL&lt;tab/&gt;_NotPixel &lt;br/&gt;    POP&lt;tab/&gt;    X &lt;br/&gt;    POP&lt;tab/&gt;    Y &lt;br/&gt;    RET &lt;br/&gt; &lt;br/&gt;;**************************************************************    &lt;br/&gt;;******Place the digits at a precise place for the score*******    &lt;br/&gt;;**************************************************************  &lt;br/&gt;DISPLAYDIGIT: &lt;br/&gt;    PUSH    A &lt;br/&gt;    PUSH    B &lt;br/&gt;    CALL    _DisplayHexaDigit &lt;br/&gt;    POP     A &lt;br/&gt;    POP     B &lt;br/&gt;    RET &lt;br/&gt; &lt;br/&gt;; **************************************************************    &lt;br/&gt;; **************************Win the game************************    &lt;br/&gt;; **************************************************************    &lt;br/&gt;WIN: &lt;br/&gt; &lt;br/&gt;&lt;tab/&gt;CLR&lt;tab/&gt;    B&lt;tab/&gt;&lt;tab/&gt;; rank of the letter &lt;br/&gt;&lt;tab/&gt;MOVE&lt;tab/&gt;#0, X&lt;tab/&gt;&lt;tab/&gt;; coord x &lt;br/&gt;&lt;tab/&gt;MOVE&lt;tab/&gt;#1, Y&lt;tab/&gt;&lt;tab/&gt;; coord y &lt;br/&gt; &lt;br/&gt;WINLOOP: &lt;br/&gt;&lt;tab/&gt;PUSH&lt;tab/&gt;X &lt;br/&gt;&lt;tab/&gt;MOVE&lt;tab/&gt;B, X &lt;br/&gt;&lt;tab/&gt;MOVE&lt;tab/&gt;TABLEWIN+{X}, A&lt;tab/&gt;; letter to display &lt;br/&gt;&lt;tab/&gt;POP&lt;tab/&gt;X &lt;br/&gt;&lt;tab/&gt;JUMP,EQ&lt;tab/&gt;ENDWIN&lt;tab/&gt;&lt;tab/&gt;; if end of table -&amp;gt; END &lt;br/&gt; &lt;br/&gt;&lt;tab/&gt;CALL&lt;tab/&gt;_DrawChar&lt;tab/&gt;; Display a letter &lt;br/&gt; &lt;br/&gt;&lt;tab/&gt;INC&lt;tab/&gt;X&lt;tab/&gt;&lt;tab/&gt;; next X coord &lt;br/&gt;&lt;tab/&gt;INC&lt;tab/&gt;B&lt;tab/&gt;&lt;tab/&gt;; next letter &lt;br/&gt;&lt;tab/&gt;JUMP&lt;tab/&gt;WINLOOP&lt;tab/&gt;&lt;tab/&gt;; restart &lt;br/&gt; &lt;br/&gt;ENDWIN: &lt;br/&gt;&lt;tab/&gt;HALT &lt;br/&gt; &lt;br/&gt;&lt;tab/&gt;TABLE&lt;tab/&gt;#8+1&lt;tab/&gt;; 8 letters + end of table &lt;br/&gt; &lt;br/&gt;; **************************************************************    &lt;br/&gt;; *********************Table of win letters*********************    &lt;br/&gt;; **************************************************************   &lt;br/&gt;TABLEWIN: &lt;br/&gt;&lt;tab/&gt;BYTE&lt;tab/&gt;#&amp;quot;V&amp;quot;&lt;tab/&gt;&lt;tab/&gt;; V &lt;br/&gt;&lt;tab/&gt;BYTE&lt;tab/&gt;#&amp;quot;I&amp;quot;&lt;tab/&gt;&lt;tab/&gt;; I &lt;br/&gt;&lt;tab/&gt;BYTE&lt;tab/&gt;#&amp;quot;C&amp;quot;&lt;tab/&gt;&lt;tab/&gt;; C &lt;br/&gt;&lt;tab/&gt;BYTE&lt;tab/&gt;#&amp;quot;T&amp;quot;&lt;tab/&gt;&lt;tab/&gt;; T &lt;br/&gt;&lt;tab/&gt;BYTE&lt;tab/&gt;#&amp;quot;O&amp;quot;&lt;tab/&gt;&lt;tab/&gt;; O &lt;br/&gt;&lt;tab/&gt;BYTE&lt;tab/&gt;#&amp;quot;I&amp;quot;&lt;tab/&gt;&lt;tab/&gt;; I &lt;br/&gt;&lt;tab/&gt;BYTE&lt;tab/&gt;#&amp;quot;R&amp;quot;&lt;tab/&gt;&lt;tab/&gt;; R &lt;br/&gt;&lt;tab/&gt;BYTE&lt;tab/&gt;#&amp;quot;E&amp;quot;&lt;tab/&gt;&lt;tab/&gt;; E &lt;br/&gt;&lt;tab/&gt;BYTE&lt;tab/&gt;#0&lt;tab/&gt;&lt;tab/&gt;; end of table &lt;br/&gt; &lt;br/&gt;; **************************************************************    &lt;br/&gt;; ************************Lose the game*************************    &lt;br/&gt;; **************************************************************  &lt;br/&gt;LOSE: &lt;br/&gt; &lt;br/&gt;&lt;tab/&gt;CLR&lt;tab/&gt;    B&lt;tab/&gt;&lt;tab/&gt;; rank of the letter &lt;br/&gt;&lt;tab/&gt;MOVE&lt;tab/&gt;#0, X&lt;tab/&gt;&lt;tab/&gt;; coord x &lt;br/&gt;&lt;tab/&gt;MOVE&lt;tab/&gt;#1, Y&lt;tab/&gt;&lt;tab/&gt;; coord y &lt;br/&gt; &lt;br/&gt;lOSELOOP: &lt;br/&gt;&lt;tab/&gt;PUSH&lt;tab/&gt;X &lt;br/&gt;&lt;tab/&gt;MOVE&lt;tab/&gt;B, X &lt;br/&gt;&lt;tab/&gt;MOVE&lt;tab/&gt;TABLELOSE+{X}, A&lt;tab/&gt;; letter to display &lt;br/&gt;&lt;tab/&gt;POP&lt;tab/&gt;X &lt;br/&gt;&lt;tab/&gt;JUMP,EQ&lt;tab/&gt;ENDLOSE&lt;tab/&gt;&lt;tab/&gt;; if end of table -&amp;gt; END &lt;br/&gt; &lt;br/&gt;&lt;tab/&gt;CALL&lt;tab/&gt;_DrawChar&lt;tab/&gt;; Display a letter &lt;br/&gt; &lt;br/&gt;&lt;tab/&gt;INC&lt;tab/&gt;X&lt;tab/&gt;&lt;tab/&gt;; next X coord &lt;br/&gt;&lt;tab/&gt;INC&lt;tab/&gt;B&lt;tab/&gt;&lt;tab/&gt;; next letter &lt;br/&gt;&lt;tab/&gt;JUMP&lt;tab/&gt;lOSELOOP&lt;tab/&gt;; restart &lt;br/&gt; &lt;br/&gt;ENDLOSE: &lt;br/&gt;&lt;tab/&gt;HALT &lt;br/&gt; &lt;br/&gt;&lt;tab/&gt;TABLE&lt;tab/&gt;#8+1&lt;tab/&gt;; 8 letters + end of table &lt;br/&gt; &lt;br/&gt;; **************************************************************    &lt;br/&gt;; *********************Table of lose letters********************    &lt;br/&gt;; **************************************************************   &lt;br/&gt;TABLELOSE: &lt;br/&gt;&lt;tab/&gt;BYTE&lt;tab/&gt;#&amp;quot;D&amp;quot;&lt;tab/&gt;&lt;tab/&gt;; D &lt;br/&gt;&lt;tab/&gt;BYTE&lt;tab/&gt;#&amp;quot;E&amp;quot;&lt;tab/&gt;&lt;tab/&gt;; E &lt;br/&gt;&lt;tab/&gt;BYTE&lt;tab/&gt;#&amp;quot;F&amp;quot;&lt;tab/&gt;&lt;tab/&gt;; F &lt;br/&gt;&lt;tab/&gt;BYTE&lt;tab/&gt;#&amp;quot;A&amp;quot;&lt;tab/&gt;&lt;tab/&gt;; A &lt;br/&gt;&lt;tab/&gt;BYTE&lt;tab/&gt;#&amp;quot;I&amp;quot;&lt;tab/&gt;&lt;tab/&gt;; I &lt;br/&gt;&lt;tab/&gt;BYTE&lt;tab/&gt;#&amp;quot;T&amp;quot;&lt;tab/&gt;&lt;tab/&gt;; T &lt;br/&gt;&lt;tab/&gt;BYTE&lt;tab/&gt;#&amp;quot;E&amp;quot;&lt;tab/&gt;&lt;tab/&gt;; E &lt;br/&gt;&lt;tab/&gt;BYTE&lt;tab/&gt;#&amp;quot;!&amp;quot;&lt;tab/&gt;&lt;tab/&gt;; ! &lt;br/&gt;&lt;tab/&gt;BYTE&lt;tab/&gt;#0&lt;tab/&gt;&lt;tab/&gt;; end of table &lt;br/&gt;</Source>
  <MemoryData>070DDC03400CDC00400ADC00400BDC204006554006594001DC044000DF054006554006594003DC0C4002DE024006554006594005DC14400454400C510001080C5001303030303030580C0154400A51030101B154400B51020101B1AB4001AB4003AB40055740005640010101A95740025640030101A95740045640050101A90850010108060C5740005640010101A95740025640030101A95740045640050101A9DE014007DD184007120194DF014008DD01400812019BDE014009DD1840091201A25640017200170107DC2040015740075B4000DD09400A1200E9AA400A54400A51030101B1100107DD09400B1201B9AA400BDC00400A54400B51020101B154400A51030101B1564003720017014CDC2040035740085B4002DD09400A12012EAA400A54400A51030101B110014CDD09400B1201B9AA400BDC00400A54400B51020101B154400A51030101B1564005720017005BDC2040055740095B4004DD09400A120173AA400A54400A51030101B1100191DD09400B1201B9AA400BDC00400A54400B51020101B154400A51030101B110005BDC0040071000ACDC1840081000B7DC0040091000C20B0A01081B0E0F02080901080C0C0D0221520053010A465411D20E1201CF0108212A291001BE03FF09564943544F4952450021520053010A465411F40E1201F10108212A291001E003FF094445464149544521</MemoryData>
</Dolphin>