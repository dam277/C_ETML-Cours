<?xml version="1.0" encoding="utf-16"?>
<Dolphin>
  <Version>1.1.3</Version>
  <ProcessorName>PSI30</ProcessorName>
  <ProcessorIPS>10000</ProcessorIPS>
  <ProcessorStep>C</ProcessorStep>
  <ProcessorInto>O</ProcessorInto>
  <PanelMode>Calm</PanelMode>
  <DisplayBitmap>N</DisplayBitmap>
  <DisplayTechno>CRT</DisplayTechno>
  <KeyboardArrows>N</KeyboardArrows>
  <Source>    SCOREDIGIT1 = 0 ; Score (First digit on the 7segment) 0, 1, 2, 3 &lt;br/&gt;    SCOREDIGIT2 = 1 ; Score (Second digit on the 7segment) 00 10, 20, 30 &lt;br/&gt;    LIFES = 2 ; Lifes of the ship &lt;br/&gt;    LENGTH = 3 ; Lenght of the array &lt;br/&gt; &lt;br/&gt;    ; Constants &lt;br/&gt;    LIFEPOS = 0 ; Position of the life in the 7-segment &lt;br/&gt;    SCOREPOS1 = 3 ; Position of the score digit in the 7-segment &lt;br/&gt;    SCOREPOS2 = 2 ; Position of the 2nd score digit in the 7-segment &lt;br/&gt; &lt;br/&gt;    .LOC    0 &lt;br/&gt;    SUB #LENGTH, SP &lt;br/&gt; &lt;br/&gt;    ; Set the score and life &lt;br/&gt;    MOVE    #3, {SP}+LIFES ; Move 3 to the lifes &lt;br/&gt;    MOVE    #0, {SP}+SCOREDIGIT1 ; Move 0 to the 1st score digit &lt;br/&gt;    MOVE    #0, {SP}+SCOREDIGIT2 ; Move 0 to the 2nd score digit &lt;br/&gt; &lt;br/&gt;    ; **********************Set the 7-segment***********************    &lt;br/&gt;    ; Display Life &lt;br/&gt;    MOVE    {SP}+LIFES, A &lt;br/&gt;    MOVE    #LIFEPOS, B &lt;br/&gt;    CALL    _DisplayHexaDigit &lt;br/&gt; &lt;br/&gt;    ; Display separator &lt;br/&gt;    MOVE    #1, A &lt;br/&gt;    RL      A &lt;br/&gt;    RL      A &lt;br/&gt;    RL      A &lt;br/&gt;    RL      A &lt;br/&gt;    RL      A &lt;br/&gt;    RL      A &lt;br/&gt;    MOVE    A, _DIGIT1 &lt;br/&gt; &lt;br/&gt;    ; Display &lt;br/&gt;    MOVE    {SP}+SCOREDIGIT1, A &lt;br/&gt;    MOVE    #SCOREPOS1, B &lt;br/&gt;    CALL    DISPLAYDIGIT &lt;br/&gt; &lt;br/&gt;    ; Display &lt;br/&gt;    MOVE    {SP}+SCOREDIGIT2, A &lt;br/&gt;    MOVE    #SCOREPOS2, B &lt;br/&gt;    CALL    DISPLAYDIGIT &lt;br/&gt;     &lt;br/&gt;; **************************************************************    &lt;br/&gt;; ********************Start of the program**********************    &lt;br/&gt;; **************************************************************    &lt;br/&gt;START:   &lt;br/&gt; &lt;br/&gt;; **************************************************************    &lt;br/&gt;; *************************Score turn***************************    &lt;br/&gt;; **************************************************************    &lt;br/&gt;SCORE:  &lt;br/&gt;     &lt;br/&gt;    // Sleep &lt;br/&gt;    PUSH&lt;tab/&gt;A &lt;br/&gt;&lt;tab/&gt;MOVE&lt;tab/&gt;#10, A &lt;br/&gt;&lt;tab/&gt;CALL&lt;tab/&gt;_WaitSec&lt;tab/&gt;&lt;tab/&gt;; wait... &lt;br/&gt;&lt;tab/&gt;POP&lt;tab/&gt;A &lt;br/&gt; &lt;br/&gt;    COMP    #9, {SP}+SCOREDIGIT1 ; Score digit 1 is equal 9 &lt;br/&gt;    JUMP,EQ UPDATEDIGIT2 &lt;br/&gt;  &lt;br/&gt;    ; Increment score &lt;br/&gt;    INC     {SP}+SCOREDIGIT1 &lt;br/&gt; &lt;br/&gt;    ; Move variables &lt;br/&gt;    MOVE    {SP}+SCOREDIGIT1, A &lt;br/&gt;    MOVE    #SCOREPOS1, B &lt;br/&gt; &lt;br/&gt;    ; Display &lt;br/&gt;    CALL    DISPLAYDIGIT &lt;br/&gt; &lt;br/&gt;    ; Redo function &lt;br/&gt;    JUMP    SCORE &lt;br/&gt; &lt;br/&gt;UPDATEDIGIT2: &lt;br/&gt; &lt;br/&gt;    ; Compare the second digit to update it &lt;br/&gt;    COMP    #9, {SP}+SCOREDIGIT2 ; Score digit 2 is equal 9 &lt;br/&gt;    JUMP,EQ WIN ; YES -&amp;gt; Win the game &lt;br/&gt;    ; NO -&amp;gt; Continue up second digit &lt;br/&gt;    INC     {SP}+SCOREDIGIT2 &lt;br/&gt;    MOVE    #0, {SP}+SCOREDIGIT1 ; Reset the score digit 1 &lt;br/&gt; &lt;br/&gt;    ; Move variables &lt;br/&gt;    MOVE    {SP}+SCOREDIGIT2, A &lt;br/&gt;    MOVE    #SCOREPOS2, B &lt;br/&gt; &lt;br/&gt;    ; Display &lt;br/&gt;    CALL    DISPLAYDIGIT &lt;br/&gt; &lt;br/&gt;    ; Move variables &lt;br/&gt;    MOVE    {SP}+SCOREDIGIT1, A &lt;br/&gt;    MOVE    #SCOREPOS1, B &lt;br/&gt; &lt;br/&gt;    ; Display &lt;br/&gt;    CALL    DISPLAYDIGIT &lt;br/&gt; &lt;br/&gt;    ; Redo function &lt;br/&gt;    JUMP    SCORE &lt;br/&gt; &lt;br/&gt;DISPLAYDIGIT: &lt;br/&gt;    PUSH    A &lt;br/&gt;    PUSH    B &lt;br/&gt;    CALL    _DisplayHexaDigit &lt;br/&gt;    POP     A &lt;br/&gt;    POP     B &lt;br/&gt;    RET &lt;br/&gt; &lt;br/&gt;WIN: &lt;br/&gt; &lt;br/&gt;    HALT &lt;br/&gt; &lt;br/&gt;LOSE: &lt;br/&gt; &lt;br/&gt;    HALT&lt;br/&gt;</Source>
  <MemoryData>0703DC034002DC004000DC004001544002510001080C5001303030303030580C01544000510301006E544001510201006E08500A0108060CDD09400012004DAA4000544000510301006E100031DD094001120076AA4001DC004000544001510201006E544000510301006E100031080901080C0C0D020303</MemoryData>
</Dolphin>